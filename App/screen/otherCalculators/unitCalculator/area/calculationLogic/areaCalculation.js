const fixedValue = 4;

export const squarekilometer_Calculation = (method, num) => {
    if (method === "square_meter to square_kilometer") return Number.parseFloat(eval(num / 1e-6)).toExponential(fixedValue);
    else if (method === "square_hectometer to square_kilometer") return Number.parseFloat(num / 100).toExponential(fixedValue);
    else if (method === "square_dekameter to square_kilometer") return Number.parseFloat(num / 10000).toExponential(fixedValue);
    else if (method === "square_decimeter to square_kilometer") return Number.parseFloat(eval(num / 1e+8)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_kilometer") return Number.parseFloat(eval(num / 1e+10)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_kilometer") return Number.parseFloat(eval(num / 1e+12)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_kilometer") return Number.parseFloat(eval(num / 1e+18)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_kilometer") return Number.parseFloat(eval(num * 1e-24)).toExponential(fixedValue);
    else if (method === "hectare to square_kilometer") return Number.parseFloat(eval(num / 100)).toExponential(fixedValue);
    else if (method === "are to square_kilometer") return Number.parseFloat(eval(num / 247)).toExponential(fixedValue);
    else if (method === "barn to square_kilometer") return Number.parseFloat(eval(num * 1e-34)).toExponential(fixedValue);
    else if (method === "square_mile to square_kilometer") return Number.parseFloat(eval(num * 6.4516e-16)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_kilometer") return Number.parseFloat(eval(num * 2.59)).toExponential(fixedValue);
    else if (method === "square_yard to square_kilometer") return Number.parseFloat(eval(num / 1.196e+6)).toExponential(fixedValue);
    else if (method === "square_foot to square_kilometer") return Number.parseFloat(eval(num * 9.2903e-8)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_kilometer") return Number.parseFloat(eval(num * 9.2903e-8)).toExponential(fixedValue);
    else if (method === "square_inch to square_kilometer") return Number.parseFloat(eval(num / 1.55e+9)).toExponential(fixedValue);
    else if (method === "circular_inch to square_kilometer") return Number.parseFloat(eval(num * 5.06707479e-10)).toExponential(fixedValue);
    else if (method === "township to square_kilometer") return Number.parseFloat(eval(num * 93.239571972)).toExponential(fixedValue);
    else if (method === "section to square_kilometer") return Number.parseFloat(eval(num * 2.5899881103)).toExponential(fixedValue);
    else if (method === "arce to square_kilometer") return Number.parseFloat(eval(num / 247)).toExponential(fixedValue);
    else if (method === "arce_us to square_kilometer") return Number.parseFloat(eval(num / 247)).toExponential(fixedValue);
    else if (method === "rood to square_kilometer") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "square_chain to square_kilometer") return Number.parseFloat(eval(num / 2471)).toExponential(fixedValue);
    else if (method === "square_rod to square_kilometer") return Number.parseFloat(eval(num / 39537)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_kilometer") return Number.parseFloat(eval(num / 39537)).toExponential(fixedValue);
    else if (method === "square_perch to square_kilometer") return Number.parseFloat(eval(num * 39537)).toExponential(fixedValue);
    else if (method === "square_pole to square_kilometer") return Number.parseFloat(eval(num * 39537)).toExponential(fixedValue);
    else if (method === "square_mil to square_kilometer") return Number.parseFloat(eval(num * 6.4516e-16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_kilometer") return Number.parseFloat(eval(num * 5.06707479e-16)).toExponential(fixedValue);
    else if (method === "homestead to square_kilometer") return Number.parseFloat(eval(num * 0.6475)).toExponential(fixedValue);
    else if (method === "sabin to square_kilometer") return Number.parseFloat(eval(num * 9.290303999e-8)).toExponential(fixedValue);
    else if (method === "arpent to square_kilometer") return Number.parseFloat(eval(num * 0.0040412822)).toExponential(fixedValue);
    else if (method === "cuerda to square_kilometer") return Number.parseFloat(eval(num * 9.2903e-8)).toExponential(fixedValue);
    else if (method === "plaza to square_kilometer") return Number.parseFloat(eval(num * 0.0064)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_kilometer") return Number.parseFloat(eval(num * 6.987369999e-7)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_kilometer") return Number.parseFloat(eval(num * 0.0039303956)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_kilometer") return Number.parseFloat(eval(num * 6.652461599e-35)).toExponential(fixedValue);
};
export const squaremeter_Calculation = (method, num) => {
    if (method === "square_kilometer to square_meter") return Number.parseFloat(eval(num * 1e-6)).toExponential(fixedValue);
    else if (method === "square_hectometer to square_meter") return Number.parseFloat(num / 10000).toExponential(fixedValue);
    else if (method === "square_dekameter to square_meter") return Number.parseFloat(num / 10000).toExponential(fixedValue);
    else if (method === "square_decimeter to square_meter") return Number.parseFloat(eval(num / 100)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_meter") return Number.parseFloat(eval(num / 10000)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_meter") return Number.parseFloat(eval(num / 1e+6)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_meter") return Number.parseFloat(eval(num / 1e+12)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_meter") return Number.parseFloat(eval(num * 1e+18)).toExponential(fixedValue);
    else if (method === "hectare to square_meter") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "are to square_meter") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "barn to square_meter") return Number.parseFloat(eval(num * 1e-28)).toExponential(fixedValue);
    else if (method === "square_mile to square_meter") return Number.parseFloat(eval(num * 2589988.1103)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_meter") return Number.parseFloat(eval(num * 2589998.8829)).toExponential(fixedValue);
    else if (method === "square_yard to square_meter") return Number.parseFloat(eval(num / 1.196)).toExponential(fixedValue);
    else if (method === "square_foot to square_meter") return Number.parseFloat(eval(num / 10.764)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_meter") return Number.parseFloat(eval(num / 10.764)).toExponential(fixedValue);
    else if (method === "square_inch to square_meter") return Number.parseFloat(eval(num / 1550)).toExponential(fixedValue);
    else if (method === "circular_inch to square_meter") return Number.parseFloat(eval(num * 0.0005067075)).toExponential(fixedValue);
    else if (method === "township to square_meter") return Number.parseFloat(eval(num * 93239571.972)).toExponential(fixedValue);
    else if (method === "section to square_meter") return Number.parseFloat(eval(num * 2589988.1103)).toExponential(fixedValue);
    else if (method === "arce to square_meter") return Number.parseFloat(eval(num * 4046.8561)).toExponential(fixedValue);
    else if (method === "arce_us to square_meter") return Number.parseFloat(eval(num * 4046.8725)).toExponential(fixedValue);
    else if (method === "rood to square_meter") return Number.parseFloat(eval(num * 1011.7141056)).toExponential(fixedValue);
    else if (method === "square_chain to square_meter") return Number.parseFloat(eval(num * 404.68564224)).toExponential(fixedValue);
    else if (method === "square_rod to square_meter") return Number.parseFloat(eval(num * 25.29285264)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_meter") return Number.parseFloat(eval(num * 25.292953812)).toExponential(fixedValue);
    else if (method === "square_perch to square_meter") return Number.parseFloat(eval(num * 25.29285264)).toExponential(fixedValue);
    else if (method === "square_pole to square_meter") return Number.parseFloat(eval(num * 25.29285264)).toExponential(fixedValue);
    else if (method === "square_mil to square_meter") return Number.parseFloat(eval(num * 6.4516e-16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_meter") return Number.parseFloat(eval(num * 5.06707479e-16)).toExponential(fixedValue);
    else if (method === "homestead to square_meter") return Number.parseFloat(eval(num * 647497.02758)).toExponential(fixedValue);
    else if (method === "sabin to square_meter") return Number.parseFloat(eval(num * 0.09290304)).toExponential(fixedValue);
    else if (method === "arpent to square_meter") return Number.parseFloat(eval(num * 4041.28224)).toExponential(fixedValue);
    else if (method === "cuerda to square_meter") return Number.parseFloat(eval(num * 3930.395625)).toExponential(fixedValue);
    else if (method === "plaza to square_meter") return Number.parseFloat(eval(num * 6400)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_meter") return Number.parseFloat(eval(num * 0.698737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_meter") return Number.parseFloat(eval(num * 6.288633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_meter") return Number.parseFloat(eval(num * 6.652461599e-29)).toExponential(fixedValue);
};
export const squareHectometer_Calculation = (method, num) => {
    if (method === "square_meter to square_hectometer") return Number.parseFloat(eval(num / 10000)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_hectometer") return Number.parseFloat(num * 100).toExponential(fixedValue);
    else if (method === "square_dekameter to square_hectometer") return Number.parseFloat(num / 100).toExponential(fixedValue);
    else if (method === "square_decimeter to square_hectometer") return Number.parseFloat(eval(num / 1e+6)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_hectometer") return Number.parseFloat(eval(num / 1e+8)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_hectometer") return Number.parseFloat(eval(num / 1e+10)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_hectometer") return Number.parseFloat(eval(num / 1e+16)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_hectometer") return Number.parseFloat(eval(num * 1e+22)).toExponential(fixedValue);
    else if (method === "hectare to square_hectometer") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "are to square_hectometer") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "barn to square_hectometer") return Number.parseFloat(eval(num * 1e-28)).toExponential(fixedValue);
    else if (method === "square_mile to square_hectometer") return Number.parseFloat(eval(num * 2589988.1103)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_hectometer") return Number.parseFloat(eval(num * 2589998.8829)).toExponential(fixedValue);
    else if (method === "square_yard to square_hectometer") return Number.parseFloat(eval(num / 11960)).toExponential(fixedValue);
    else if (method === "square_foot to square_hectometer") return Number.parseFloat(eval(num * 0.0929)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_hectometer") return Number.parseFloat(eval(num * 0.0929)).toExponential(fixedValue);
    else if (method === "square_inch to square_hectometer") return Number.parseFloat(eval(num / 1.55e+7)).toExponential(fixedValue);
    else if (method === "circular_inch to square_hectometer") return Number.parseFloat(eval(num * 0.0005)).toExponential(fixedValue);
    else if (method === "township to square_hectometer") return Number.parseFloat(eval(num * 93239571.972)).toExponential(fixedValue);
    else if (method === "section to square_hectometer") return Number.parseFloat(eval(num * 2589988.1103)).toExponential(fixedValue);
    else if (method === "arce to square_hectometer") return Number.parseFloat(eval(num * 4046.8561)).toExponential(fixedValue);
    else if (method === "arce_us to square_hectometer") return Number.parseFloat(eval(num * 4046.8725)).toExponential(fixedValue);
    else if (method === "rood to square_hectometer") return Number.parseFloat(eval(num * 1011.7141056)).toExponential(fixedValue);
    else if (method === "square_chain to square_hectometer") return Number.parseFloat(eval(num * 404.68564224)).toExponential(fixedValue);
    else if (method === "square_rod to square_hectometer") return Number.parseFloat(eval(num * 25.29285264)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_hectometer") return Number.parseFloat(eval(num * 25.292953812)).toExponential(fixedValue);
    else if (method === "square_perch to square_hectometer") return Number.parseFloat(eval(num * 25.29285264)).toExponential(fixedValue);
    else if (method === "square_pole to square_hectometer") return Number.parseFloat(eval(num * 25.29285264)).toExponential(fixedValue);
    else if (method === "square_mil to square_hectometer") return Number.parseFloat(eval(num * 6.4516e-16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_hectometer") return Number.parseFloat(eval(num * 5.06707479e-16)).toExponential(fixedValue);
    else if (method === "homestead to square_hectometer") return Number.parseFloat(eval(num * 647497.02758)).toExponential(fixedValue);
    else if (method === "sabin to square_hectometer") return Number.parseFloat(eval(num * 0.09290304)).toExponential(fixedValue);
    else if (method === "arpent to square_hectometer") return Number.parseFloat(eval(num * 4041.28224)).toExponential(fixedValue);
    else if (method === "cuerda to square_hectometer") return Number.parseFloat(eval(num * 3930.395625)).toExponential(fixedValue);
    else if (method === "plaza to square_hectometer") return Number.parseFloat(eval(num * 6400)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_hectometer") return Number.parseFloat(eval(num * 0.698737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_hectometer") return Number.parseFloat(eval(num * 6.288633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_hectometer") return Number.parseFloat(eval(num * 6.652461599e-29)).toExponential(fixedValue);
};
export const squareDekameter_Calculation = (method, num) => {
    if (method === "square_meter to square_dekameter") return Number.parseFloat(eval(num / 100)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_dekameter") return Number.parseFloat(num * 10000).toExponential(fixedValue);
    else if (method === "square_hectometer to square_dekameter") return Number.parseFloat(num * 100).toExponential(fixedValue);
    else if (method === "square_decimeter to square_dekameter") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_dekameter") return Number.parseFloat(eval(num / 1e+6)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_dekameter") return Number.parseFloat(eval(num / 1e+8)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_dekameter") return Number.parseFloat(eval(num / 1e+14)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_dekameter") return Number.parseFloat(eval(num / 9.223e+18)).toExponential(fixedValue);
    else if (method === "hectare to square_dekameter") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "are to square_dekameter") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "barn to square_dekameter") return Number.parseFloat(eval(num * 9.999999999e-31)).toExponential(fixedValue);
    else if (method === "square_mile to square_dekameter") return Number.parseFloat(eval(num * 25899.9888)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_dekameter") return Number.parseFloat(eval(num * 2589998.8829)).toExponential(fixedValue);
    else if (method === "square_yard to square_dekameter") return Number.parseFloat(eval(num / 120)).toExponential(fixedValue);
    else if (method === "square_foot to square_dekameter") return Number.parseFloat(eval(num / 1076)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_dekameter") return Number.parseFloat(eval(num / 1076)).toExponential(fixedValue);
    else if (method === "square_inch to square_dekameter") return Number.parseFloat(eval(num * 6.4516e-6)).toExponential(fixedValue);
    else if (method === "circular_inch to square_dekameter") return Number.parseFloat(eval(num * 0.0000050671)).toExponential(fixedValue);
    else if (method === "township to square_dekameter") return Number.parseFloat(eval(num * 932399)).toExponential(fixedValue);
    else if (method === "section to square_dekameter") return Number.parseFloat(eval(num * 25900)).toExponential(fixedValue);
    else if (method === "arce to square_dekameter") return Number.parseFloat(eval(num * 40.4686)).toExponential(fixedValue);
    else if (method === "arce_us to square_dekameter") return Number.parseFloat(eval(num * 40.4687)).toExponential(fixedValue);
    else if (method === "rood to square_dekameter") return Number.parseFloat(eval(num * 10.117141056)).toExponential(fixedValue);
    else if (method === "square_chain to square_dekameter") return Number.parseFloat(eval(num * 4.0468564224)).toExponential(fixedValue);
    else if (method === "square_rod to square_dekameter") return Number.parseFloat(eval(num * 0.2529285264)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_dekameter") return Number.parseFloat(eval(num * 0.2529295381)).toExponential(fixedValue);
    else if (method === "square_perch to square_dekameter") return Number.parseFloat(eval(num * 0.2529285264)).toExponential(fixedValue);
    else if (method === "square_pole to square_dekameter") return Number.parseFloat(eval(num * 0.2529285264)).toExponential(fixedValue);
    else if (method === "square_mil to square_dekameter") return Number.parseFloat(eval(num * 6.4516e-12)).toExponential(fixedValue);
    else if (method === "circular_mil to square_dekameter") return Number.parseFloat(eval(num * 5.06707479e-12)).toExponential(fixedValue);
    else if (method === "homestead to square_dekameter") return Number.parseFloat(eval(num * 6474.9702758)).toExponential(fixedValue);
    else if (method === "sabin to square_dekameter") return Number.parseFloat(eval(num * 0.0009290304)).toExponential(fixedValue);
    else if (method === "arpent to square_dekameter") return Number.parseFloat(eval(num * 40.4128224)).toExponential(fixedValue);
    else if (method === "cuerda to square_dekameter") return Number.parseFloat(eval(num * 39.30395625)).toExponential(fixedValue);
    else if (method === "plaza to square_dekameter") return Number.parseFloat(eval(num * 64)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_dekameter") return Number.parseFloat(eval(num * 0.00698737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_dekameter") return Number.parseFloat(eval(num * 0.06288633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_dekameter") return Number.parseFloat(eval(num * 6.652461599e-31)).toExponential(fixedValue);
};
export const squareDecimeter_Calculation = (method, num) => {
    console.log("method", method)
    if (method === "square_meter to square_decimeter") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_decimeter") return Number.parseFloat(num * 1e+8).toExponential(fixedValue);
    else if (method === "square_hectometer to square_decimeter") return Number.parseFloat(num * 1e+6).toExponential(fixedValue);
    else if (method === "square_dekameter to square_decimeter") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_decimeter") return Number.parseFloat(eval(num / 100)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_decimeter") return Number.parseFloat(eval(num / 10000)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_decimeter") return Number.parseFloat(eval(num / 1e+10)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_decimeter") return Number.parseFloat(eval(num / 1e+16)).toExponential(fixedValue);
    else if (method === "hectare to square_decimeter") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "are to square_decimeter") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "barn to square_decimeter") return Number.parseFloat(eval(num * 1e-26)).toExponential(fixedValue);
    else if (method === "square_mile to square_decimeter") return Number.parseFloat(eval(num * 258998811.0336)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_decimeter") return Number.parseFloat(eval(num * 258999888.293)).toExponential(fixedValue);
    else if (method === "square_yard to square_decimeter") return Number.parseFloat(eval(num / 120)).toExponential(fixedValue);
    else if (method === "square_foot to square_decimeter") return Number.parseFloat(eval(num / 1076)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_decimeter") return Number.parseFloat(eval(num / 1076)).toExponential(fixedValue);
    else if (method === "square_inch to square_decimeter") return Number.parseFloat(eval(num * 6.4516e-6)).toExponential(fixedValue);
    else if (method === "circular_inch to square_decimeter") return Number.parseFloat(eval(num * 0.0506707479)).toExponential(fixedValue);
    else if (method === "township to square_decimeter") return Number.parseFloat(eval(num * 9323957197.2)).toExponential(fixedValue);
    else if (method === "section to square_decimeter") return Number.parseFloat(eval(num * 258998811.03)).toExponential(fixedValue);
    else if (method === "arce to square_decimeter") return Number.parseFloat(eval(num * 404685.6119)).toExponential(fixedValue);
    else if (method === "arce_us to square_decimeter") return Number.parseFloat(eval(num * 404687.2496)).toExponential(fixedValue);
    else if (method === "rood to square_decimeter") return Number.parseFloat(eval(num * 101171.41056)).toExponential(fixedValue);
    else if (method === "square_chain to square_decimeter") return Number.parseFloat(eval(num * 40468.564224)).toExponential(fixedValue);
    else if (method === "square_rod to square_decimeter") return Number.parseFloat(eval(num * 2529.285264)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_decimeter") return Number.parseFloat(eval(num * 2529.2953812)).toExponential(fixedValue);
    else if (method === "square_perch to square_decimeter") return Number.parseFloat(eval(num * 2529.285264)).toExponential(fixedValue);
    else if (method === "square_pole to square_decimeter") return Number.parseFloat(eval(num * 2529.285264)).toExponential(fixedValue);
    else if (method === "square_mil to square_decimeter") return Number.parseFloat(eval(num * 6.4516e-8)).toExponential(fixedValue);
    else if (method === "circular_mil to square_decimeter") return Number.parseFloat(eval(num * 5.06707479e-8)).toExponential(fixedValue);
    else if (method === "homestead to square_decimeter") return Number.parseFloat(eval(num * 64749702.758)).toExponential(fixedValue);
    else if (method === "sabin to square_decimeter") return Number.parseFloat(eval(num * 9.290304)).toExponential(fixedValue);
    else if (method === "arpent to square_decimeter") return Number.parseFloat(eval(num * 404128.224)).toExponential(fixedValue);
    else if (method === "cuerda to square_decimeter") return Number.parseFloat(eval(num * 393039.5625)).toExponential(fixedValue);
    else if (method === "plaza to square_decimeter") return Number.parseFloat(eval(num * 640000)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_decimeter") return Number.parseFloat(eval(num * 69.8737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_decimeter") return Number.parseFloat(eval(num * 628.8633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_decimeter") return Number.parseFloat(eval(num * 6.652461599E-27)).toExponential(fixedValue);
};
export const squareCentimeter_Calculation = (method, num) => {
    if (method === "square_meter to square_centimeter") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_centimeter") return Number.parseFloat(num * 1e+10).toExponential(fixedValue);
    else if (method === "square_hectometer to square_centimeter") return Number.parseFloat(num * 1e+8).toExponential(fixedValue);
    else if (method === "square_dekameter to square_centimeter") return Number.parseFloat(eval(num * 1e+6)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_centimeter") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_centimeter") return Number.parseFloat(eval(num / 100)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_centimeter") return Number.parseFloat(eval(num / 1e+8)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_centimeter") return Number.parseFloat(eval(num / 1e+14)).toExponential(fixedValue);
    else if (method === "hectare to square_centimeter") return Number.parseFloat(eval(num * 1e+8)).toExponential(fixedValue);
    else if (method === "are to square_centimeter") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "barn to square_centimeter") return Number.parseFloat(eval(num * 1e-24)).toExponential(fixedValue);
    else if (method === "square_mile to square_centimeter") return Number.parseFloat(eval(num * 25899881103.36)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_centimeter") return Number.parseFloat(eval(num * 25899988829.2994)).toExponential(fixedValue);
    else if (method === "square_yard to square_centimeter") return Number.parseFloat(eval(num * 8361.2736)).toExponential(fixedValue);
    else if (method === "square_foot to square_centimeter") return Number.parseFloat(eval(num * 929.0304)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_centimeter") return Number.parseFloat(eval(num * 929.0341)).toExponential(fixedValue);
    else if (method === "square_inch to square_centimeter") return Number.parseFloat(eval(num * 6.4516)).toExponential(fixedValue);
    else if (method === "circular_inch to square_centimeter") return Number.parseFloat(eval(num * 5.067074791)).toExponential(fixedValue);
    else if (method === "township to square_centimeter") return Number.parseFloat(eval(num * 9.324e+11)).toExponential(fixedValue);
    else if (method === "section to square_centimeter") return Number.parseFloat(eval(num * 25899881103)).toExponential(fixedValue);
    else if (method === "arce to square_centimeter") return Number.parseFloat(eval(num * 40468561.1889)).toExponential(fixedValue);
    else if (method === "arce_us to square_centimeter") return Number.parseFloat(eval(num * 40468724.96)).toExponential(fixedValue);
    else if (method === "rood to square_centimeter") return Number.parseFloat(eval(num * 10117141.056)).toExponential(fixedValue);
    else if (method === "square_chain to square_centimeter") return Number.parseFloat(eval(num * 4046856.4224)).toExponential(fixedValue);
    else if (method === "square_rod to square_centimeter") return Number.parseFloat(eval(num * 252928.5264)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_centimeter") return Number.parseFloat(eval(num * 252929.53812)).toExponential(fixedValue);
    else if (method === "square_perch to square_centimeter") return Number.parseFloat(eval(num * 252928.5264)).toExponential(fixedValue);
    else if (method === "square_pole to square_centimeter") return Number.parseFloat(eval(num * 252928.5264)).toExponential(fixedValue);
    else if (method === "square_mil to square_centimeter") return Number.parseFloat(eval(num * 6.4516e-6)).toExponential(fixedValue);
    else if (method === "circular_mil to square_centimeter") return Number.parseFloat(eval(num * 0.0000050671)).toExponential(fixedValue);
    else if (method === "homestead to square_centimeter") return Number.parseFloat(eval(num * 6474970275.8)).toExponential(fixedValue);
    else if (method === "sabin to square_centimeter") return Number.parseFloat(eval(num * 929.0304)).toExponential(fixedValue);
    else if (method === "arpent to square_centimeter") return Number.parseFloat(eval(num * 40412822.4)).toExponential(fixedValue);
    else if (method === "cuerda to square_centimeter") return Number.parseFloat(eval(num * 39303956.25)).toExponential(fixedValue);
    else if (method === "plaza to square_centimeter") return Number.parseFloat(eval(num * 64000000)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_centimeter") return Number.parseFloat(eval(num * 6987.37)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_centimeter") return Number.parseFloat(eval(num * 62886.33)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_centimeter") return Number.parseFloat(eval(num * 6.652461599E-25)).toExponential(fixedValue);
};
export const squareMilimeter_Calculation = (method, num) => {
    if (method === "square_meter to square_milimeter") return Number.parseFloat(eval(num * 1e+6)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_milimeter") return Number.parseFloat(num * 1e+12).toExponential(fixedValue);
    else if (method === "square_hectometer to square_milimeter") return Number.parseFloat(num * 1e+10).toExponential(fixedValue);
    else if (method === "square_dekameter to square_milimeter") return Number.parseFloat(eval(num * 1e+8)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_milimeter") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_milimeter") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_milimeter") return Number.parseFloat(eval(num / 1e+6)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_milimeter") return Number.parseFloat(eval(num / 1e+12)).toExponential(fixedValue);
    else if (method === "hectare to square_milimeter") return Number.parseFloat(eval(num * 1e+10)).toExponential(fixedValue);
    else if (method === "are to square_milimeter") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "barn to square_milimeter") return Number.parseFloat(eval(num * 1e-22)).toExponential(fixedValue);
    else if (method === "square_mile to square_milimeter") return Number.parseFloat(eval(num * 2589988110336)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_milimeter") return Number.parseFloat(eval(num * 2589998882929.94)).toExponential(fixedValue);
    else if (method === "square_yard to square_milimeter") return Number.parseFloat(eval(num * 836127.36)).toExponential(fixedValue);
    else if (method === "square_foot to square_milimeter") return Number.parseFloat(eval(num * 92903.04)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_milimeter") return Number.parseFloat(eval(num * 92903.4116)).toExponential(fixedValue);
    else if (method === "square_inch to square_milimeter") return Number.parseFloat(eval(num * 645.16)).toExponential(fixedValue);
    else if (method === "circular_inch to square_milimeter") return Number.parseFloat(eval(num * 506.7074791)).toExponential(fixedValue);
    else if (method === "township to square_milimeter") return Number.parseFloat(eval(num * 9324e+13)).toExponential(fixedValue);
    else if (method === "section to square_milimeter") return Number.parseFloat(eval(num * 259e+12)).toExponential(fixedValue);
    else if (method === "arce to square_milimeter") return Number.parseFloat(eval(num * 4046856118.8869)).toExponential(fixedValue);
    else if (method === "arce_us to square_milimeter") return Number.parseFloat(eval(num * 4046872495.9976)).toExponential(fixedValue);
    else if (method === "rood to square_milimeter") return Number.parseFloat(eval(num * 1011714105.6)).toExponential(fixedValue);
    else if (method === "square_chain to square_milimeter") return Number.parseFloat(eval(num * 404685642.24)).toExponential(fixedValue);
    else if (method === "square_rod to square_milimeter") return Number.parseFloat(eval(num * 25292852.64)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_milimeter") return Number.parseFloat(eval(num * 25292953.812)).toExponential(fixedValue);
    else if (method === "square_perch to square_milimeter") return Number.parseFloat(eval(num * 25292852.64)).toExponential(fixedValue);
    else if (method === "square_pole to square_milimeter") return Number.parseFloat(eval(num * 25292852.64)).toExponential(fixedValue);
    else if (method === "square_mil to square_milimeter") return Number.parseFloat(eval(num * 6.4516e-6)).toExponential(fixedValue);
    else if (method === "circular_mil to square_milimeter") return Number.parseFloat(eval(num * 0.0005067075)).toExponential(fixedValue);
    else if (method === "homestead to square_milimeter") return Number.parseFloat(eval(num * 647497027584)).toExponential(fixedValue);
    else if (method === "sabin to square_milimeter") return Number.parseFloat(eval(num * 92903.04)).toExponential(fixedValue);
    else if (method === "arpent to square_milimeter") return Number.parseFloat(eval(num * 4041282240)).toExponential(fixedValue);
    else if (method === "cuerda to square_milimeter") return Number.parseFloat(eval(num * 3930395625)).toExponential(fixedValue);
    else if (method === "plaza to square_milimeter") return Number.parseFloat(eval(num * 6400000000)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_milimeter") return Number.parseFloat(eval(num * 698737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_milimeter") return Number.parseFloat(eval(num * 6288633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_milimeter") return Number.parseFloat(eval(num * 6.652461599E-23)).toExponential(fixedValue);
};
export const squareMicrometer_Calculation = (method, num) => {
    if (method === "square_meter to square_micrometer") return Number.parseFloat(eval(num * 1e+12)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_micrometer") return Number.parseFloat(num * 1e+18).toExponential(fixedValue);
    else if (method === "square_hectometer to square_micrometer") return Number.parseFloat(num * 1e+16).toExponential(fixedValue);
    else if (method === "square_dekameter to square_micrometer") return Number.parseFloat(eval(num * 1e+14)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_micrometer") return Number.parseFloat(eval(num * 1e+10)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_micrometer") return Number.parseFloat(eval(num * 1e+8)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_micrometer") return Number.parseFloat(eval(num * 1e+6)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_micrometer") return Number.parseFloat(eval(num / 1e+6)).toExponential(fixedValue);
    else if (method === "hectare to square_micrometer") return Number.parseFloat(eval(num * 1e+16)).toExponential(fixedValue);
    else if (method === "are to square_micrometer") return Number.parseFloat(eval(num * 100000000000000)).toExponential(fixedValue);
    else if (method === "barn to square_micrometer") return Number.parseFloat(eval(num * 1e-16)).toExponential(fixedValue);
    else if (method === "square_mile to square_micrometer") return Number.parseFloat(eval(num * 258998811.0336)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_micrometer") return Number.parseFloat(eval(num * 258999888.293)).toExponential(fixedValue);
    else if (method === "square_yard to square_micrometer") return Number.parseFloat(eval(num * 836127360000)).toExponential(fixedValue);
    else if (method === "square_foot to square_micrometer") return Number.parseFloat(eval(num * 92903040000.7433)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_micrometer") return Number.parseFloat(eval(num * 92903411615.1626)).toExponential(fixedValue);
    else if (method === "square_inch to square_micrometer") return Number.parseFloat(eval(num * 6452e+8)).toExponential(fixedValue);
    else if (method === "circular_inch to square_micrometer") return Number.parseFloat(eval(num * 506707479.1)).toExponential(fixedValue);
    else if (method === "township to square_micrometer") return Number.parseFloat(eval(num * 9223e+18)).toExponential(fixedValue);
    else if (method === "section to square_micrometer") return Number.parseFloat(eval(num * 2589988110335972400)).toExponential(fixedValue);
    else if (method === "arce to square_micrometer") return Number.parseFloat(eval(num * 4.0469E+15)).toExponential(fixedValue);
    else if (method === "arce_us to square_micrometer") return Number.parseFloat(eval(num * 4.0469E+15)).toExponential(fixedValue);
    else if (method === "rood to square_micrometer") return Number.parseFloat(eval(num * 1011714105600001)).toExponential(fixedValue);
    else if (method === "square_chain to square_micrometer") return Number.parseFloat(eval(num * 404685642240009)).toExponential(fixedValue);
    else if (method === "square_rod to square_micrometer") return Number.parseFloat(eval(num * 25292852640000)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_micrometer") return Number.parseFloat(eval(num * 25292953811714)).toExponential(fixedValue);
    else if (method === "square_perch to square_micrometer") return Number.parseFloat(eval(num * 25292852640000)).toExponential(fixedValue);
    else if (method === "square_pole to square_micrometer") return Number.parseFloat(eval(num * 25292852640000)).toExponential(fixedValue);
    else if (method === "square_mil to square_micrometer") return Number.parseFloat(eval(num * 645.16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_micrometer") return Number.parseFloat(eval(num * 506.7074791)).toExponential(fixedValue);
    else if (method === "homestead to square_micrometer") return Number.parseFloat(eval(num * 6474970275839)).toExponential(fixedValue);
    else if (method === "sabin to square_micrometer") return Number.parseFloat(eval(num * 92903040000)).toExponential(fixedValue);
    else if (method === "arpent to square_micrometer") return Number.parseFloat(eval(num * 4041282239999928)).toExponential(fixedValue);
    else if (method === "cuerda to square_micrometer") return Number.parseFloat(eval(num * 3930395625000000)).toExponential(fixedValue);
    else if (method === "plaza to square_micrometer") return Number.parseFloat(eval(num * 6400000000000000)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_micrometer") return Number.parseFloat(eval(num * 698737000000)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_micrometer") return Number.parseFloat(eval(num * 6288633000000)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_micrometer") return Number.parseFloat(eval(num * 6.652461599E-17)).toExponential(fixedValue);
};
export const squareNanometer_Calculation = (method, num) => {
    if (method === "square_meter to square_nanometer") return Number.parseFloat(eval(num * 1e+18)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_nanometer") return Number.parseFloat(num * 1e+24).toExponential(fixedValue);
    else if (method === "square_hectometer to square_nanometer") return Number.parseFloat(num * 1e+22).toExponential(fixedValue);
    else if (method === "square_dekameter to square_nanometer") return Number.parseFloat(eval(num * 1e+20)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_nanometer") return Number.parseFloat(eval(num * 1e+16)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_nanometer") return Number.parseFloat(eval(num * 1e+14)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_nanometer") return Number.parseFloat(eval(num * 1e+12)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_nanometer") return Number.parseFloat(eval(num * 1e+6)).toExponential(fixedValue);
    else if (method === "hectare to square_nanometer") return Number.parseFloat(eval(num * 1e+22)).toExponential(fixedValue);
    else if (method === "are to square_nanometer") return Number.parseFloat(eval(num * 1e+20)).toExponential(fixedValue);
    else if (method === "barn to square_nanometer") return Number.parseFloat(eval(num * 1e-10)).toExponential(fixedValue);
    else if (method === "square_mile to square_nanometer") return Number.parseFloat(eval(num * 2.59e+24)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_nanometer") return Number.parseFloat(eval(num * 2.59e+24)).toExponential(fixedValue);
    else if (method === "square_yard to square_nanometer") return Number.parseFloat(eval(num * 8.3613e+17)).toExponential(fixedValue);
    else if (method === "square_foot to square_nanometer") return Number.parseFloat(eval(num * 9.2903e+16)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_nanometer") return Number.parseFloat(eval(num * 9.2903E+16)).toExponential(fixedValue);
    else if (method === "square_inch to square_nanometer") return Number.parseFloat(eval(num * 6.452e+14)).toExponential(fixedValue);
    else if (method === "circular_inch to square_nanometer") return Number.parseFloat(eval(num * 506707479097494)).toExponential(fixedValue);
    else if (method === "township to square_nanometer") return Number.parseFloat(eval(num * 9.323957197E+25)).toExponential(fixedValue);
    else if (method === "section to square_nanometer") return Number.parseFloat(eval(num * 2.58998811E+24)).toExponential(fixedValue);
    else if (method === "arce to square_nanometer") return Number.parseFloat(eval(num * 4.0469E+21)).toExponential(fixedValue);
    else if (method === "arce_us to square_nanometer") return Number.parseFloat(eval(num * 4.0469E+21)).toExponential(fixedValue);
    else if (method === "rood to square_nanometer") return Number.parseFloat(eval(num * 1.011714105E+21)).toExponential(fixedValue);
    else if (method === "square_chain to square_nanometer") return Number.parseFloat(eval(num * 404685642240008700000)).toExponential(fixedValue);
    else if (method === "square_rod to square_nanometer") return Number.parseFloat(eval(num * 25292852640000)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_nanometer") return Number.parseFloat(eval(num * 25292953811714)).toExponential(fixedValue);
    else if (method === "square_perch to square_nanometer") return Number.parseFloat(eval(num * 25292852640000)).toExponential(fixedValue);
    else if (method === "square_pole to square_nanometer") return Number.parseFloat(eval(num * 25292852640000)).toExponential(fixedValue);
    else if (method === "square_mil to square_nanometer") return Number.parseFloat(eval(num * 645.16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_nanometer") return Number.parseFloat(eval(num * 506.7074791)).toExponential(fixedValue);
    else if (method === "homestead to square_nanometer") return Number.parseFloat(eval(num * 6474970275839)).toExponential(fixedValue);
    else if (method === "sabin to square_nanometer") return Number.parseFloat(eval(num * 92903040000)).toExponential(fixedValue);
    else if (method === "arpent to square_nanometer") return Number.parseFloat(eval(num * 4041282239999928)).toExponential(fixedValue);
    else if (method === "cuerda to square_nanometer") return Number.parseFloat(eval(num * 3930395625000000)).toExponential(fixedValue);
    else if (method === "plaza to square_nanometer") return Number.parseFloat(eval(num * 6400000000000000)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_nanometer") return Number.parseFloat(eval(num * 698737000000)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_nanometer") return Number.parseFloat(eval(num * 6288633000000)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_nanometer") return Number.parseFloat(eval(num * 6.652461599E-17)).toExponential(fixedValue);
};
export const squareHectare_Calculation = (method, num) => {
    if (method === "square_meter to hectare") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "square_kilometer to hectare") return Number.parseFloat(num * 100).toExponential(fixedValue);
    else if (method === "square_hectometer to hectare") return Number.parseFloat(num * 1).toExponential(fixedValue);
    else if (method === "square_dekameter to hectare") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "square_decimeter to hectare") return Number.parseFloat(eval(num / 1e+6)).toExponential(fixedValue);
    else if (method === "square_centimeter to hectare") return Number.parseFloat(eval(num * 1e-8)).toExponential(fixedValue);
    else if (method === "square_milimeter to hectare") return Number.parseFloat(eval(num * 1e-10)).toExponential(fixedValue);
    else if (method === "square_micrometer to hectare") return Number.parseFloat(eval(num * 1e-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to hectare") return Number.parseFloat(eval(num * 1e-22)).toExponential(fixedValue);
    else if (method === "are to hectare") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "barn to hectare") return Number.parseFloat(eval(num * 1e-32)).toExponential(fixedValue);
    else if (method === "square_mile to hectare") return Number.parseFloat(eval(num * 258.9988)).toExponential(fixedValue);
    else if (method === "square_mile_us to hectare") return Number.parseFloat(eval(num * 258.9999)).toExponential(fixedValue);
    else if (method === "square_yard to hectare") return Number.parseFloat(eval(num * 8.3613e-5)).toExponential(fixedValue);
    else if (method === "square_foot to hectare") return Number.parseFloat(eval(num * 9.2903E-6)).toExponential(fixedValue);
    else if (method === "square_foot_us to hectare") return Number.parseFloat(eval(num * 9.2903E-6)).toExponential(fixedValue);
    else if (method === "square_inch to hectare") return Number.parseFloat(eval(num * 6.4516e-8)).toExponential(fixedValue);
    else if (method === "circular_inch to hectare") return Number.parseFloat(eval(num * 5.06707479E-8)).toExponential(fixedValue);
    else if (method === "township to hectare") return Number.parseFloat(eval(num * 932399)).toExponential(fixedValue);
    else if (method === "section to hectare") return Number.parseFloat(eval(num * 258.99881103)).toExponential(fixedValue);
    else if (method === "arce to hectare") return Number.parseFloat(eval(num * 0.4047)).toExponential(fixedValue);
    else if (method === "arce_us to hectare") return Number.parseFloat(eval(num * 0.4047)).toExponential(fixedValue);
    else if (method === "rood to hectare") return Number.parseFloat(eval(num * 0.1011714106)).toExponential(fixedValue);
    else if (method === "square_chain to hectare") return Number.parseFloat(eval(num * 0.0404685642)).toExponential(fixedValue);
    else if (method === "square_rod to hectare") return Number.parseFloat(eval(num * 0.0025292853)).toExponential(fixedValue);
    else if (method === "square_rod_us to hectare") return Number.parseFloat(eval(num * 0.0025292954)).toExponential(fixedValue);
    else if (method === "square_perch to hectare") return Number.parseFloat(eval(num * 0.0025292853)).toExponential(fixedValue);
    else if (method === "square_pole to hectare") return Number.parseFloat(eval(num * 0.0025292853)).toExponential(fixedValue);
    else if (method === "square_mil to hectare") return Number.parseFloat(eval(num * 6.4516E-14)).toExponential(fixedValue);
    else if (method === "circular_mil to hectare") return Number.parseFloat(eval(num * 5.06707479E-14)).toExponential(fixedValue);
    else if (method === "homestead to hectare") return Number.parseFloat(eval(num * 64.749702758)).toExponential(fixedValue);
    else if (method === "sabin to hectare") return Number.parseFloat(eval(num * 0.0000092903)).toExponential(fixedValue);
    else if (method === "arpent to hectare") return Number.parseFloat(eval(num * 0.404128224)).toExponential(fixedValue);
    else if (method === "cuerda to hectare") return Number.parseFloat(eval(num * 0.3930395625)).toExponential(fixedValue);
    else if (method === "plaza to hectare") return Number.parseFloat(eval(num * 0.64)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to hectare") return Number.parseFloat(eval(num * 0.0000698737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to hectare") return Number.parseFloat(eval(num * 0.0006288633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to hectare") return Number.parseFloat(eval(num * 6.652461599E-33)).toExponential(fixedValue);
};
export const squareAre_Calculation = (method, num) => {
    if (method === "square_meter to are") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "square_kilometer to are") return Number.parseFloat(num * 10000).toExponential(fixedValue);
    else if (method === "square_hectometer to are") return Number.parseFloat(num * 100).toExponential(fixedValue);
    else if (method === "square_dekameter to are") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_decimeter to are") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "square_centimeter to are") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "square_milimeter to are") return Number.parseFloat(eval(num * 1E-8)).toExponential(fixedValue);
    else if (method === "square_micrometer to are") return Number.parseFloat(eval(num * 1e-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to are") return Number.parseFloat(eval(num * 1e-20)).toExponential(fixedValue);
    else if (method === "hectare to are") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "barn to are") return Number.parseFloat(eval(num * 1e-30)).toExponential(fixedValue);
    else if (method === "square_mile to are") return Number.parseFloat(eval(num * 25899.8811)).toExponential(fixedValue);
    else if (method === "square_mile_us to are") return Number.parseFloat(eval(num * 25899.9888)).toExponential(fixedValue);
    else if (method === "square_yard to are") return Number.parseFloat(eval(num * 0.0084)).toExponential(fixedValue);
    else if (method === "square_foot to are") return Number.parseFloat(eval(num * 0.0009)).toExponential(fixedValue);
    else if (method === "square_foot_us to are") return Number.parseFloat(eval(num * 0.0009)).toExponential(fixedValue);
    else if (method === "square_inch to are") return Number.parseFloat(eval(num * 6.4516e-6)).toExponential(fixedValue);
    else if (method === "circular_inch to are") return Number.parseFloat(eval(num * 5.0671E-6)).toExponential(fixedValue);
    else if (method === "township to are") return Number.parseFloat(eval(num * 932395.71972)).toExponential(fixedValue);
    else if (method === "section to are") return Number.parseFloat(eval(num * 25899.881103)).toExponential(fixedValue);
    else if (method === "arce to are") return Number.parseFloat(eval(num * 40.4686)).toExponential(fixedValue);
    else if (method === "arce_us to are") return Number.parseFloat(eval(num * 40.4686)).toExponential(fixedValue);
    else if (method === "rood to are") return Number.parseFloat(eval(num * 10.117141056)).toExponential(fixedValue);
    else if (method === "square_chain to are") return Number.parseFloat(eval(num * 4.0468564224)).toExponential(fixedValue);
    else if (method === "square_rod to are") return Number.parseFloat(eval(num * 0.2529285264)).toExponential(fixedValue);
    else if (method === "square_rod_us to are") return Number.parseFloat(eval(num * 0.2529295381)).toExponential(fixedValue);
    else if (method === "square_perch to are") return Number.parseFloat(eval(num * 0.2529285264)).toExponential(fixedValue);
    else if (method === "square_pole to are") return Number.parseFloat(eval(num * 0.2529285264)).toExponential(fixedValue);
    else if (method === "square_mil to are") return Number.parseFloat(eval(num * 6.4516E-12)).toExponential(fixedValue);
    else if (method === "circular_mil to are") return Number.parseFloat(eval(num * 5.06707479E-12)).toExponential(fixedValue);
    else if (method === "homestead to are") return Number.parseFloat(eval(num * 6474.9702758)).toExponential(fixedValue);
    else if (method === "sabin to are") return Number.parseFloat(eval(num * 0.0009290304)).toExponential(fixedValue);
    else if (method === "arpent to are") return Number.parseFloat(eval(num * 40.4128224)).toExponential(fixedValue);
    else if (method === "cuerda to are") return Number.parseFloat(eval(num * 39.30395625)).toExponential(fixedValue);
    else if (method === "plaza to are") return Number.parseFloat(eval(num * 64)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to are") return Number.parseFloat(eval(num * 0.00698737)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to are") return Number.parseFloat(eval(num * 0.06288633)).toExponential(fixedValue);
    else if (method === "electron_cross_section to are") return Number.parseFloat(eval(num * 6.652461599E-31)).toExponential(fixedValue);
};
export const squareBarn_Calculation = (method, num) => {
    if (method === "square_meter to barn") return Number.parseFloat(eval(num * 1E+28)).toExponential(fixedValue);
    else if (method === "square_kilometer to barn") return Number.parseFloat(num * 1E+34).toExponential(fixedValue);
    else if (method === "square_hectometer to barn") return Number.parseFloat(num * 1E+32).toExponential(fixedValue);
    else if (method === "square_dekameter to barn") return Number.parseFloat(eval(num * 1E+30)).toExponential(fixedValue);
    else if (method === "square_decimeter to barn") return Number.parseFloat(eval(num * 1E+26)).toExponential(fixedValue);
    else if (method === "square_centimeter to barn") return Number.parseFloat(eval(num * 1E+24)).toExponential(fixedValue);
    else if (method === "square_milimeter to barn") return Number.parseFloat(eval(num * 1E+22)).toExponential(fixedValue);
    else if (method === "square_micrometer to barn") return Number.parseFloat(eval(num * 10000000000000000)).toExponential(fixedValue);
    else if (method === "square_nanometer to barn") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "hectare to barn") return Number.parseFloat(eval(num * 1e-32)).toExponential(fixedValue);
    else if (method === "are to barn") return Number.parseFloat(eval(num * 1e-30)).toExponential(fixedValue);
    else if (method === "square_mile to barn") return Number.parseFloat(eval(num * 2.59E+34)).toExponential(fixedValue);
    else if (method === "square_mile_us to barn") return Number.parseFloat(eval(num * 2.59E+34)).toExponential(fixedValue);
    else if (method === "square_yard to barn") return Number.parseFloat(eval(num * 4.046856422E+31)).toExponential(fixedValue);
    else if (method === "square_foot to barn") return Number.parseFloat(eval(num * 9.2903E+26)).toExponential(fixedValue);
    else if (method === "square_foot_us to barn") return Number.parseFloat(eval(num * 9.2903E+26)).toExponential(fixedValue);
    else if (method === "square_inch to barn") return Number.parseFloat(eval(num * 6.4516E+24)).toExponential(fixedValue);
    else if (method === "circular_inch to barn") return Number.parseFloat(eval(num * 5.06707479E+24)).toExponential(fixedValue);
    else if (method === "township to barn") return Number.parseFloat(eval(num * 932395.71972)).toExponential(fixedValue);
    else if (method === "section to barn") return Number.parseFloat(eval(num * 9.323957197E+35)).toExponential(fixedValue);
    else if (method === "arce to barn") return Number.parseFloat(eval(num * 4.0469E+31)).toExponential(fixedValue);
    else if (method === "arce_us to barn") return Number.parseFloat(eval(num * 4.0469E+31)).toExponential(fixedValue);
    else if (method === "rood to barn") return Number.parseFloat(eval(num * 1.011714105E+31)).toExponential(fixedValue);
    else if (method === "square_chain to barn") return Number.parseFloat(eval(num * 4.046856422E+30)).toExponential(fixedValue);
    else if (method === "square_rod to barn") return Number.parseFloat(eval(num * 2.529285264E+29)).toExponential(fixedValue);
    else if (method === "square_rod_us to barn") return Number.parseFloat(eval(num * 2.529295381E+29)).toExponential(fixedValue);
    else if (method === "square_perch to barn") return Number.parseFloat(eval(num * 2.529285264E+29)).toExponential(fixedValue);
    else if (method === "square_pole to barn") return Number.parseFloat(eval(num * 2.529285264E+29)).toExponential(fixedValue);
    else if (method === "square_mil to barn") return Number.parseFloat(eval(num * 6.4516E+18)).toExponential(fixedValue);
    else if (method === "circular_mil to barn") return Number.parseFloat(eval(num * 5.0671E+18)).toExponential(fixedValue);
    else if (method === "homestead to barn") return Number.parseFloat(eval(num * 6.474970275E+33)).toExponential(fixedValue);
    else if (method === "sabin to barn") return Number.parseFloat(eval(num * 9.290303999E+26)).toExponential(fixedValue);
    else if (method === "arpent to barn") return Number.parseFloat(eval(num * 4.041282239E+31)).toExponential(fixedValue);
    else if (method === "cuerda to barn") return Number.parseFloat(eval(num * 3.930395624E+31)).toExponential(fixedValue);
    else if (method === "plaza to barn") return Number.parseFloat(eval(num * 64E+31)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to barn") return Number.parseFloat(eval(num * 6.987369999E+27)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to barn") return Number.parseFloat(eval(num * 6.288632999E+28)).toExponential(fixedValue);
    else if (method === "electron_cross_section to barn") return Number.parseFloat(eval(num * 0.66524616)).toExponential(fixedValue);
};
export const squareMile_Calculation = (method, num) => {
    if (method === "square_meter to square_mile") return Number.parseFloat(eval(num * 3.861E-7)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_mile") return Number.parseFloat(num * 0.3861).toExponential(fixedValue);
    else if (method === "square_hectometer to square_mile") return Number.parseFloat(num * 0.0039).toExponential(fixedValue);
    else if (method === "square_dekameter to square_mile") return Number.parseFloat(eval(num * 3.861E-5)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_mile") return Number.parseFloat(eval(num * 3.861E-9)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_mile") return Number.parseFloat(eval(num * 3.861E-11)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_mile") return Number.parseFloat(eval(num * 3.861E-13)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_mile") return Number.parseFloat(eval(num * 3.861E-19)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_mile") return Number.parseFloat(eval(num * 3.861E-25)).toExponential(fixedValue);
    else if (method === "hectare to square_mile") return Number.parseFloat(eval(num * 0.0039)).toExponential(fixedValue);
    else if (method === "are to square_mile") return Number.parseFloat(eval(num * 3.861E-5)).toExponential(fixedValue);
    else if (method === "barn to square_mile") return Number.parseFloat(eval(num * 3.861E-35)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_mile") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_yard to square_mile") return Number.parseFloat(eval(num * 3.2283E-7)).toExponential(fixedValue);
    else if (method === "square_foot to square_mile") return Number.parseFloat(eval(num * 3.587E-8)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_mile") return Number.parseFloat(eval(num * 3.587E-8)).toExponential(fixedValue);
    else if (method === "square_inch to square_mile") return Number.parseFloat(eval(num * 2.491E-10)).toExponential(fixedValue);
    else if (method === "circular_inch to square_mile") return Number.parseFloat(eval(num * 1.9564E-10)).toExponential(fixedValue);
    else if (method === "township to square_mile") return Number.parseFloat(eval(num * 36)).toExponential(fixedValue);
    else if (method === "section to square_mile") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "arce to square_mile") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "arce_us to square_mile") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "rood to square_mile") return Number.parseFloat(eval(num * 0.0004)).toExponential(fixedValue);
    else if (method === "square_chain to square_mile") return Number.parseFloat(eval(num * 0.0002)).toExponential(fixedValue);
    else if (method === "square_rod to square_mile") return Number.parseFloat(eval(num * 9.7656E-6)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_mile") return Number.parseFloat(eval(num * 9.7657E-6)).toExponential(fixedValue);
    else if (method === "square_perch to square_mile") return Number.parseFloat(eval(num * 9.7656E-6)).toExponential(fixedValue);
    else if (method === "square_pole to square_mile") return Number.parseFloat(eval(num * 9.7656E-6)).toExponential(fixedValue);
    else if (method === "square_mil to square_mile") return Number.parseFloat(eval(num * 2.491E-16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_mile") return Number.parseFloat(eval(num * 1.9564E-16)).toExponential(fixedValue);
    else if (method === "homestead to square_mile") return Number.parseFloat(eval(num * 0.25)).toExponential(fixedValue);
    else if (method === "sabin to square_mile") return Number.parseFloat(eval(num * 3.587E-8)).toExponential(fixedValue);
    else if (method === "arpent to square_mile") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "cuerda to square_mile") return Number.parseFloat(eval(num * 0.0015)).toExponential(fixedValue);
    else if (method === "plaza to square_mile") return Number.parseFloat(eval(num * 0.0025)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_mile") return Number.parseFloat(eval(num * 2.6978E-7)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_mile") return Number.parseFloat(eval(num * 2.4281E-6)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_mile") return Number.parseFloat(eval(num * 2.5685E-35)).toExponential(fixedValue);
};
export const squareMileUs_Calculation = (method, num) => {
    if (method === "square_meter to square_mile_us") return Number.parseFloat(eval(num * 3.861E-7)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_mile_us") return Number.parseFloat(num * 0.3861).toExponential(fixedValue);
    else if (method === "square_hectometer to square_mile_us") return Number.parseFloat(num * 0.0039).toExponential(fixedValue);
    else if (method === "square_dekameter to square_mile_us") return Number.parseFloat(eval(num * 3.861E-5)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_mile_us") return Number.parseFloat(eval(num * 3.861E-9)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_mile_us") return Number.parseFloat(eval(num * 3.861E-11)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_mile_us") return Number.parseFloat(eval(num * 3.861E-13)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_mile_us") return Number.parseFloat(eval(num * 3.861E-19)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_mile_us") return Number.parseFloat(eval(num * 3.861E-25)).toExponential(fixedValue);
    else if (method === "hectare to square_mile_us") return Number.parseFloat(eval(num * 0.0039)).toExponential(fixedValue);
    else if (method === "are to square_mile_us") return Number.parseFloat(eval(num * 3.861E-5)).toExponential(fixedValue);
    else if (method === "barn to square_mile_us") return Number.parseFloat(eval(num * 3.861E-35)).toExponential(fixedValue);
    else if (method === "square_mile to square_mile_us") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_yard to square_mile_us") return Number.parseFloat(eval(num * 3.2283E-7)).toExponential(fixedValue);
    else if (method === "square_foot to square_mile_us") return Number.parseFloat(eval(num * 3.587E-8)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_mile_us") return Number.parseFloat(eval(num * 3.587E-8)).toExponential(fixedValue);
    else if (method === "square_inch to square_mile_us") return Number.parseFloat(eval(num * 2.491E-10)).toExponential(fixedValue);
    else if (method === "circular_inch to square_mile_us") return Number.parseFloat(eval(num * 1.9564E-10)).toExponential(fixedValue);
    else if (method === "township to square_mile_us") return Number.parseFloat(eval(num * 35.9999)).toExponential(fixedValue);
    else if (method === "section to square_mile_us") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "arce to square_mile_us") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "arce_us to square_mile_us") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "rood to square_mile_us") return Number.parseFloat(eval(num * 0.0004)).toExponential(fixedValue);
    else if (method === "square_chain to square_mile_us") return Number.parseFloat(eval(num * 0.0002)).toExponential(fixedValue);
    else if (method === "square_rod to square_mile_us") return Number.parseFloat(eval(num * 9.7656E-6)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_mile_us") return Number.parseFloat(eval(num * 9.7656E-6)).toExponential(fixedValue);
    else if (method === "square_perch to square_mile_us") return Number.parseFloat(eval(num * 9.7655E-6)).toExponential(fixedValue);
    else if (method === "square_pole to square_mile_us") return Number.parseFloat(eval(num * 9.7656E-6)).toExponential(fixedValue);
    else if (method === "square_mil to square_mile_us") return Number.parseFloat(eval(num * 2.491E-16)).toExponential(fixedValue);
    else if (method === "circular_mil to square_mile_us") return Number.parseFloat(eval(num * 1.9564E-16)).toExponential(fixedValue);
    else if (method === "homestead to square_mile_us") return Number.parseFloat(eval(num * 0.25)).toExponential(fixedValue);
    else if (method === "sabin to square_mile_us") return Number.parseFloat(eval(num * 3.587E-8)).toExponential(fixedValue);
    else if (method === "arpent to square_mile_us") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "cuerda to square_mile_us") return Number.parseFloat(eval(num * 0.0015)).toExponential(fixedValue);
    else if (method === "plaza to square_mile_us") return Number.parseFloat(eval(num * 0.0025)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_mile_us") return Number.parseFloat(eval(num * 2.6978E-7)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_mile_us") return Number.parseFloat(eval(num * 2.428E-6)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_mile_us") return Number.parseFloat(eval(num * 2.5685E-35)).toExponential(fixedValue);
};
export const squareYard_Calculation = (method, num) => {
    if (method === "square_meter to square_yard") return Number.parseFloat(eval(num * 1.19599)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_yard") return Number.parseFloat(num * 1.196e+6).toExponential(fixedValue);
    else if (method === "square_hectometer to square_yard") return Number.parseFloat(num * 11959.9).toExponential(fixedValue);
    else if (method === "square_dekameter to square_yard") return Number.parseFloat(eval(num * 119.599)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_yard") return Number.parseFloat(eval(num * 0.0119599)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_yard") return Number.parseFloat(eval(num * 0.000119599)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_yard") return Number.parseFloat(eval(num * 1.196e-6)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_yard") return Number.parseFloat(eval(num * 1.196e-12)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_yard") return Number.parseFloat(eval(num * 1.196e-18)).toExponential(fixedValue);
    else if (method === "hectare to square_yard") return Number.parseFloat(eval(num * 11959.9)).toExponential(fixedValue);
    else if (method === "are to square_yard") return Number.parseFloat(eval(num * 119.59900463)).toExponential(fixedValue);
    else if (method === "barn to square_yard") return Number.parseFloat(eval(num * 1.195990046E-28)).toExponential(fixedValue);
    else if (method === "square_mile to square_yard") return Number.parseFloat(eval(num * 3097600)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_yard") return Number.parseFloat(eval(num * 3097612.8839)).toExponential(fixedValue);
    else if (method === "square_foot to square_yard") return Number.parseFloat(eval(num * 0.1111)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_yard") return Number.parseFloat(eval(num * 0.1111)).toExponential(fixedValue);
    else if (method === "square_inch to square_yard") return Number.parseFloat(eval(num * 0.0008)).toExponential(fixedValue);
    else if (method === "circular_inch to square_yard") return Number.parseFloat(eval(num * 0.0006)).toExponential(fixedValue);
    else if (method === "township to square_yard") return Number.parseFloat(eval(num * 1.115e+8)).toExponential(fixedValue);
    else if (method === "section to square_yard") return Number.parseFloat(eval(num * 3097600)).toExponential(fixedValue);
    else if (method === "arce to square_yard") return Number.parseFloat(eval(num * 4839.9996)).toExponential(fixedValue);
    else if (method === "arce_us to square_yard") return Number.parseFloat(eval(num * 4840.0192)).toExponential(fixedValue);
    else if (method === "rood to square_yard") return Number.parseFloat(eval(num * 1210)).toExponential(fixedValue);
    else if (method === "square_chain to square_yard") return Number.parseFloat(eval(num * 484)).toExponential(fixedValue);
    else if (method === "square_rod to square_yard") return Number.parseFloat(eval(num * 30.25)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_yard") return Number.parseFloat(eval(num * 30.250121)).toExponential(fixedValue);
    else if (method === "square_perch to square_yard") return Number.parseFloat(eval(num * 30.25)).toExponential(fixedValue);
    else if (method === "square_pole to square_yard") return Number.parseFloat(eval(num * 30.25)).toExponential(fixedValue);
    else if (method === "square_mil to square_yard") return Number.parseFloat(eval(num * 7.716049382E-10)).toExponential(fixedValue);
    else if (method === "circular_mil to square_yard") return Number.parseFloat(eval(num * 6.060171013E-10)).toExponential(fixedValue);
    else if (method === "homestead to square_yard") return Number.parseFloat(eval(num * 774400)).toExponential(fixedValue);
    else if (method === "sabin to square_yard") return Number.parseFloat(eval(num * 0.1111111111)).toExponential(fixedValue);
    else if (method === "arpent to square_yard") return Number.parseFloat(eval(num * 4833.3333333)).toExponential(fixedValue);
    else if (method === "cuerda to square_yard") return Number.parseFloat(eval(num * 4700.7140455)).toExponential(fixedValue);
    else if (method === "plaza to square_yard") return Number.parseFloat(eval(num * 7654.3362963)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_yard") return Number.parseFloat(eval(num * 0.835682497)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_yard") return Number.parseFloat(eval(num * 7.5211424728)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_yard") return Number.parseFloat(eval(num * 7.956277857E-29)).toExponential(fixedValue);
};
export const squareFoot_Calculation = (method, num) => {
    if (method === "square_meter to square_foot") return Number.parseFloat(eval(num * 10.7639)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_foot") return Number.parseFloat(num * 10763910.4166).toExponential(fixedValue);
    else if (method === "square_hectometer to square_foot") return Number.parseFloat(num * 107639.1042).toExponential(fixedValue);
    else if (method === "square_dekameter to square_foot") return Number.parseFloat(eval(num * 1076.391)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_foot") return Number.parseFloat(eval(num * 0.1076)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_foot") return Number.parseFloat(eval(num * 0.0011)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_foot") return Number.parseFloat(eval(num * 1.0764E-5)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_foot") return Number.parseFloat(eval(num * 1.0764E-11)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_foot") return Number.parseFloat(eval(num * 1.0764E-17)).toExponential(fixedValue);
    else if (method === "hectare to square_foot") return Number.parseFloat(eval(num * 107639.1042)).toExponential(fixedValue);
    else if (method === "are to square_foot") return Number.parseFloat(eval(num * 1076.391)).toExponential(fixedValue);
    else if (method === "barn to square_foot") return Number.parseFloat(eval(num * 1.0764E-27)).toExponential(fixedValue);
    else if (method === "square_mile to square_foot") return Number.parseFloat(eval(num * 27878399.9998)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_foot") return Number.parseFloat(eval(num * 27878515.955)).toExponential(fixedValue);
    else if (method === "square_yard to square_foot") return Number.parseFloat(eval(num * 9)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_foot") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_inch to square_foot") return Number.parseFloat(eval(num * 0.0069)).toExponential(fixedValue);
    else if (method === "circular_inch to square_foot") return Number.parseFloat(eval(num * 0.0055)).toExponential(fixedValue);
    else if (method === "township to square_foot") return Number.parseFloat(eval(num * 1003622400.8821)).toExponential(fixedValue);
    else if (method === "section to square_foot") return Number.parseFloat(eval(num * 27878527.9791)).toExponential(fixedValue);
    else if (method === "arce to square_foot") return Number.parseFloat(eval(num * 43559.9967)).toExponential(fixedValue);
    else if (method === "arce_us to square_foot") return Number.parseFloat(eval(num * 43560.173)).toExponential(fixedValue);
    else if (method === "rood to square_foot") return Number.parseFloat(eval(num * 10890.0003)).toExponential(fixedValue);
    else if (method === "square_chain to square_foot") return Number.parseFloat(eval(num * 4356)).toExponential(fixedValue);
    else if (method === "square_rod to square_foot") return Number.parseFloat(eval(num * 272.25)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_foot") return Number.parseFloat(eval(num * 272.2511)).toExponential(fixedValue);
    else if (method === "square_perch to square_foot") return Number.parseFloat(eval(num * 272.2489)).toExponential(fixedValue);
    else if (method === "square_pole to square_foot") return Number.parseFloat(eval(num * 272.25)).toExponential(fixedValue);
    else if (method === "square_mil to square_foot") return Number.parseFloat(eval(num * 6.9444E-9)).toExponential(fixedValue);
    else if (method === "circular_mil to square_foot") return Number.parseFloat(eval(num * 5.4542E-9)).toExponential(fixedValue);
    else if (method === "homestead to square_foot") return Number.parseFloat(eval(num * 6969638.9644)).toExponential(fixedValue);
    else if (method === "sabin to square_foot") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "arpent to square_foot") return Number.parseFloat(eval(num * 43500.0029)).toExponential(fixedValue);
    else if (method === "cuerda to square_foot") return Number.parseFloat(eval(num * 42306.4264)).toExponential(fixedValue);
    else if (method === "plaza to square_foot") return Number.parseFloat(eval(num * 68889.0267)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_foot") return Number.parseFloat(eval(num * 7.5211)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_foot") return Number.parseFloat(eval(num * 67.6903)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_foot") return Number.parseFloat(eval(num * 7.1607E-28)).toExponential(fixedValue);
};
export const squareFootUs_Calculation = (method, num) => {
    if (method === "square_meter to square_foot_us") return Number.parseFloat(eval(num * 10.7639)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_foot_us") return Number.parseFloat(num * 10763867.3609).toExponential(fixedValue);
    else if (method === "square_hectometer to square_foot_us") return Number.parseFloat(num * 107638.6736).toExponential(fixedValue);
    else if (method === "square_dekameter to square_foot_us") return Number.parseFloat(eval(num * 1076.3867)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_foot_us") return Number.parseFloat(eval(num * 0.1076)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_foot_us") return Number.parseFloat(eval(num * 0.0011)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_foot_us") return Number.parseFloat(eval(num * 1.0764E-5)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_foot_us") return Number.parseFloat(eval(num * 1.0764E-11)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_foot_us") return Number.parseFloat(eval(num * 1.0764E-17)).toExponential(fixedValue);
    else if (method === "hectare to square_foot_us") return Number.parseFloat(eval(num * 107638.6736)).toExponential(fixedValue);
    else if (method === "are to square_foot_us") return Number.parseFloat(eval(num * 1076.3867)).toExponential(fixedValue);
    else if (method === "barn to square_foot_us") return Number.parseFloat(eval(num * 1.0764E-27)).toExponential(fixedValue);
    else if (method === "square_mile to square_foot_us") return Number.parseFloat(eval(num * 27878288.4859)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_foot_us") return Number.parseFloat(eval(num * 27878404.4407)).toExponential(fixedValue);
    else if (method === "square_yard to square_foot_us") return Number.parseFloat(eval(num * 9)).toExponential(fixedValue);
    else if (method === "square_foot to square_foot_us") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_inch to square_foot_us") return Number.parseFloat(eval(num * 0.0069)).toExponential(fixedValue);
    else if (method === "circular_inch to square_foot_us") return Number.parseFloat(eval(num * 0.0055)).toExponential(fixedValue);
    else if (method === "township to square_foot_us") return Number.parseFloat(eval(num * 1003618386.3842)).toExponential(fixedValue);
    else if (method === "section to square_foot_us") return Number.parseFloat(eval(num * 27878416.4647)).toExponential(fixedValue);
    else if (method === "arce to square_foot_us") return Number.parseFloat(eval(num * 43559.8225)).toExponential(fixedValue);
    else if (method === "arce_us to square_foot_us") return Number.parseFloat(eval(num * 43559.9988)).toExponential(fixedValue);
    else if (method === "rood to square_foot_us") return Number.parseFloat(eval(num * 10889.9567)).toExponential(fixedValue);
    else if (method === "square_chain to square_foot_us") return Number.parseFloat(eval(num * 4355.9826)).toExponential(fixedValue);
    else if (method === "square_rod to square_foot_us") return Number.parseFloat(eval(num * 272.2489)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_foot_us") return Number.parseFloat(eval(num * 272.25)).toExponential(fixedValue);
    else if (method === "square_perch to square_foot_us") return Number.parseFloat(eval(num * 272.2478)).toExponential(fixedValue);
    else if (method === "square_pole to square_foot_us") return Number.parseFloat(eval(num * 272.2489)).toExponential(fixedValue);
    else if (method === "square_mil to square_foot_us") return Number.parseFloat(eval(num * 6.9444E-9)).toExponential(fixedValue);
    else if (method === "circular_mil to square_foot_us") return Number.parseFloat(eval(num * 5.4542E-9)).toExponential(fixedValue);
    else if (method === "homestead to square_foot_us") return Number.parseFloat(eval(num * 6969611.0858)).toExponential(fixedValue);
    else if (method === "sabin to square_foot_us") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "arpent to square_foot_us") return Number.parseFloat(eval(num * 43499.8289)).toExponential(fixedValue);
    else if (method === "cuerda to square_foot_us") return Number.parseFloat(eval(num * 42306.2572)).toExponential(fixedValue);
    else if (method === "plaza to square_foot_us") return Number.parseFloat(eval(num * 68888.7511)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_foot_us") return Number.parseFloat(eval(num * 7.5211)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_foot_us") return Number.parseFloat(eval(num * 67.69)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_foot_us") return Number.parseFloat(eval(num * 7.1606E-28)).toExponential(fixedValue);
};
export const circularInch_Calculation = (method, num) => {
    if (method === "square_meter to circular_inch") return Number.parseFloat(eval(num * 1973.5252414)).toExponential(fixedValue);
    else if (method === "square_kilometer to circular_inch") return Number.parseFloat(num * 1973525241.4).toExponential(fixedValue);
    else if (method === "square_hectometer to circular_inch") return Number.parseFloat(num * 19735252.414).toExponential(fixedValue);
    else if (method === "square_dekameter to circular_inch") return Number.parseFloat(eval(num * 197352.52414)).toExponential(fixedValue);
    else if (method === "square_decimeter to circular_inch") return Number.parseFloat(eval(num * 19.735252414)).toExponential(fixedValue);
    else if (method === "square_centimeter to circular_inch") return Number.parseFloat(eval(num * 0.1973525241)).toExponential(fixedValue);
    else if (method === "square_milimeter to circular_inch") return Number.parseFloat(eval(num * 0.0019735252)).toExponential(fixedValue);
    else if (method === "square_micrometer to circular_inch") return Number.parseFloat(eval(num * 1.973525241E-9)).toExponential(fixedValue);
    else if (method === "square_nanometer to circular_inch") return Number.parseFloat(eval(num * 1.973525241E-15)).toExponential(fixedValue);
    else if (method === "hectare to circular_inch") return Number.parseFloat(eval(num * 19735252.414)).toExponential(fixedValue);
    else if (method === "are to circular_inch") return Number.parseFloat(eval(num * 197352.52414)).toExponential(fixedValue);
    else if (method === "barn to circular_inch") return Number.parseFloat(eval(num * 1.973525241E-25)).toExponential(fixedValue);
    else if (method === "square_mile to circular_inch") return Number.parseFloat(eval(num * 5111406910.674)).toExponential(fixedValue);
    else if (method === "square_mile_us to circular_inch") return Number.parseFloat(eval(num * 5111428170.66)).toExponential(fixedValue);
    else if (method === "square_yard to circular_inch") return Number.parseFloat(eval(num * 1650.11845)).toExponential(fixedValue);
    else if (method === "square_foot to circular_inch") return Number.parseFloat(eval(num * 183.3465)).toExponential(fixedValue);
    else if (method === "square_foot_us to circular_inch") return Number.parseFloat(eval(num * 183.3472)).toExponential(fixedValue);
    else if (method === "square_inch to circular_inch") return Number.parseFloat(eval(num * 1.2732395447)).toExponential(fixedValue);
    else if (method === "township to circular_inch") return Number.parseFloat(eval(num * 184010648783)).toExponential(fixedValue);
    else if (method === "section to circular_inch") return Number.parseFloat(eval(num * 5111406910.6)).toExponential(fixedValue);
    else if (method === "arce to circular_inch") return Number.parseFloat(eval(num * 7986572.6989)).toExponential(fixedValue);
    else if (method === "arce_us to circular_inch") return Number.parseFloat(eval(num * 7986605.0196)).toExponential(fixedValue);
    else if (method === "rood to circular_inch") return Number.parseFloat(eval(num * 1996643.3245)).toExponential(fixedValue);
    else if (method === "square_chain to circular_inch") return Number.parseFloat(eval(num * 798657.32979)).toExponential(fixedValue);
    else if (method === "square_rod to circular_inch") return Number.parseFloat(eval(num * 49916.083112)).toExponential(fixedValue);
    else if (method === "square_rod_us to circular_inch") return Number.parseFloat(eval(num * 39204.156816)).toExponential(fixedValue);
    else if (method === "square_perch to circular_inch") return Number.parseFloat(eval(num * 49916.083112)).toExponential(fixedValue);
    else if (method === "square_pole to circular_inch") return Number.parseFloat(eval(num * 49916.083112)).toExponential(fixedValue);
    else if (method === "square_mil to circular_inch") return Number.parseFloat(eval(num * 0.0000012732)).toExponential(fixedValue);
    else if (method === "circular_mil to circular_inch") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "homestead to circular_inch") return Number.parseFloat(eval(num * 1277851727.7)).toExponential(fixedValue);
    else if (method === "sabin to circular_inch") return Number.parseFloat(eval(num * 183.34649444)).toExponential(fixedValue);
    else if (method === "arpent to circular_inch") return Number.parseFloat(eval(num * 7975572.5082)).toExponential(fixedValue);
    else if (method === "cuerda to circular_inch") return Number.parseFloat(eval(num * 7756734.9746)).toExponential(fixedValue);
    else if (method === "plaza to circular_inch") return Number.parseFloat(eval(num * 12630561.545)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to circular_inch") return Number.parseFloat(eval(num * 1378.9751066)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to circular_inch") return Number.parseFloat(eval(num * 12410.775959)).toExponential(fixedValue);
    else if (method === "electron_cross_section to circular_inch") return Number.parseFloat(eval(num * 1.312880088E-25)).toExponential(fixedValue);
};
export const township_Calculation = (method, num) => {
    if (method === "square_meter to township") return Number.parseFloat(eval(num * 1.072505995E-8)).toExponential(fixedValue);
    else if (method === "square_kilometer to township") return Number.parseFloat(num * 0.01072506).toExponential(fixedValue);
    else if (method === "square_hectometer to township") return Number.parseFloat(num * 0.0001072506).toExponential(fixedValue);
    else if (method === "square_dekameter to township") return Number.parseFloat(eval(num * 0.0000010725)).toExponential(fixedValue);
    else if (method === "square_decimeter to township") return Number.parseFloat(eval(num * 1.072505995E-10)).toExponential(fixedValue);
    else if (method === "square_centimeter to township") return Number.parseFloat(eval(num * 1.072505995E-12)).toExponential(fixedValue);
    else if (method === "square_milimeter to township") return Number.parseFloat(eval(num * 1.072505995E-14)).toExponential(fixedValue);
    else if (method === "square_micrometer to township") return Number.parseFloat(eval(num * 1.072505995E-20)).toExponential(fixedValue);
    else if (method === "square_nanometer to township") return Number.parseFloat(eval(num * 1.072505995E-26)).toExponential(fixedValue);
    else if (method === "hectare to township") return Number.parseFloat(eval(num * 0.0001072506)).toExponential(fixedValue);
    else if (method === "are to township") return Number.parseFloat(eval(num * 0.0000010725)).toExponential(fixedValue);
    else if (method === "barn to township") return Number.parseFloat(eval(num * 1.072505995E-36)).toExponential(fixedValue);
    else if (method === "square_mile to township") return Number.parseFloat(eval(num * 0.0278)).toExponential(fixedValue);
    else if (method === "square_mile_us to township") return Number.parseFloat(eval(num * 0.0278)).toExponential(fixedValue);
    else if (method === "square_yard to township") return Number.parseFloat(eval(num * 8.967516069E-9)).toExponential(fixedValue);
    else if (method === "square_foot to township") return Number.parseFloat(eval(num * 9.963906744E-10)).toExponential(fixedValue);
    else if (method === "square_foot_us to township") return Number.parseFloat(eval(num * 9.963946599E-10)).toExponential(fixedValue);
    else if (method === "square_inch to township") return Number.parseFloat(eval(num * 6.919379683E-12)).toExponential(fixedValue);
    else if (method === "circular_inch to township") return Number.parseFloat(eval(num * 5.434468095E-12)).toExponential(fixedValue);
    else if (method === "section to township") return Number.parseFloat(eval(num * 0.0277777778)).toExponential(fixedValue);
    else if (method === "arce to township") return Number.parseFloat(eval(num * 0.0000434028)).toExponential(fixedValue);
    else if (method === "arce_us to township") return Number.parseFloat(eval(num * 0.000043403)).toExponential(fixedValue);
    else if (method === "rood to township") return Number.parseFloat(eval(num * 0.0000108507)).toExponential(fixedValue);
    else if (method === "square_chain to township") return Number.parseFloat(eval(num * 0.0000043403)).toExponential(fixedValue);
    else if (method === "square_rod to township") return Number.parseFloat(eval(num * 2.712673611E-7)).toExponential(fixedValue);
    else if (method === "square_rod_us to township") return Number.parseFloat(eval(num * 2.712684461E-7)).toExponential(fixedValue);
    else if (method === "square_perch to township") return Number.parseFloat(eval(num * 2.712673611E-7)).toExponential(fixedValue);
    else if (method === "square_pole to township") return Number.parseFloat(eval(num * 2.712673611E-7)).toExponential(fixedValue);
    else if (method === "square_mil to township") return Number.parseFloat(eval(num * 6.919379683E-18)).toExponential(fixedValue);
    else if (method === "circular_mil to township") return Number.parseFloat(eval(num * 5.434468095E-18)).toExponential(fixedValue);
    else if (method === "homestead to township") return Number.parseFloat(eval(num * 0.0069444444)).toExponential(fixedValue);
    else if (method === "sabin to township") return Number.parseFloat(eval(num * 9.963906744E-10)).toExponential(fixedValue);
    else if (method === "arpent to township") return Number.parseFloat(eval(num * 0.000043343)).toExponential(fixedValue);
    else if (method === "cuerda to township") return Number.parseFloat(eval(num * 0.0000421537)).toExponential(fixedValue);
    else if (method === "plaza to township") return Number.parseFloat(eval(num * 0.0000686404)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to township") return Number.parseFloat(eval(num * 7.49399622E-9)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to township") return Number.parseFloat(eval(num * 6.744596598E-8)).toExponential(fixedValue);
    else if (method === "electron_cross_section to township") return Number.parseFloat(eval(num * 7.134804953E-37)).toExponential(fixedValue);
};
export const section_Calculation = (method, num) => {
    if (method === "square_meter to section") return Number.parseFloat(eval(num * 3.861021585E-7)).toExponential(fixedValue);
    else if (method === "square_kilometer to section") return Number.parseFloat(num * 0.3861021585).toExponential(fixedValue);
    else if (method === "square_hectometer to section") return Number.parseFloat(num * 0.0038610216).toExponential(fixedValue);
    else if (method === "square_dekameter to section") return Number.parseFloat(eval(num * 0.0000386102)).toExponential(fixedValue);
    else if (method === "square_decimeter to section") return Number.parseFloat(eval(num * 3.861021585E-9)).toExponential(fixedValue);
    else if (method === "square_centimeter to section") return Number.parseFloat(eval(num * 3.861021585E-11)).toExponential(fixedValue);
    else if (method === "square_milimeter to section") return Number.parseFloat(eval(num * 3.861021585E-13)).toExponential(fixedValue);
    else if (method === "square_micrometer to section") return Number.parseFloat(eval(num * 3.861021585E-19)).toExponential(fixedValue);
    else if (method === "square_nanometer to section") return Number.parseFloat(eval(num * 3.861021585E-25)).toExponential(fixedValue);
    else if (method === "hectare to section") return Number.parseFloat(eval(num * 0.0038610216)).toExponential(fixedValue);
    else if (method === "are to section") return Number.parseFloat(eval(num * 0.0000386102)).toExponential(fixedValue);
    else if (method === "barn to section") return Number.parseFloat(eval(num * 3.861021585E-35)).toExponential(fixedValue);
    else if (method === "square_mile to section") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_mile_us to section") return Number.parseFloat(eval(num * 1.000004)).toExponential(fixedValue);
    else if (method === "square_yard to section") return Number.parseFloat(eval(num * 3.228305785E-7)).toExponential(fixedValue);
    else if (method === "square_foot to section") return Number.parseFloat(eval(num * 3.587006427E-8)).toExponential(fixedValue);
    else if (method === "square_foot_us to section") return Number.parseFloat(eval(num * 3.587020775E-8)).toExponential(fixedValue);
    else if (method === "square_inch to section") return Number.parseFloat(eval(num * 2.490976686E-10)).toExponential(fixedValue);
    else if (method === "circular_inch to section") return Number.parseFloat(eval(num * 1.956408514E-10)).toExponential(fixedValue);
    else if (method === "township to section") return Number.parseFloat(eval(num * 36)).toExponential(fixedValue);
    else if (method === "arce to section") return Number.parseFloat(eval(num * 0.0015625)).toExponential(fixedValue);
    else if (method === "arce_us to section") return Number.parseFloat(eval(num * 0.0015625063)).toExponential(fixedValue);
    else if (method === "rood to section") return Number.parseFloat(eval(num * 0.000390625)).toExponential(fixedValue);
    else if (method === "square_chain to section") return Number.parseFloat(eval(num * 0.00015625)).toExponential(fixedValue);
    else if (method === "square_rod to section") return Number.parseFloat(eval(num * 0.0000097656)).toExponential(fixedValue);
    else if (method === "square_rod_us to section") return Number.parseFloat(eval(num * 0.0000097657)).toExponential(fixedValue);
    else if (method === "square_perch to section") return Number.parseFloat(eval(num * 0.0000097656)).toExponential(fixedValue);
    else if (method === "square_pole to section") return Number.parseFloat(eval(num * 0.0000097656)).toExponential(fixedValue);
    else if (method === "square_mil to section") return Number.parseFloat(eval(num * 2.490976686E-16)).toExponential(fixedValue);
    else if (method === "circular_mil to section") return Number.parseFloat(eval(num * 1.956408514E-16)).toExponential(fixedValue);
    else if (method === "homestead to section") return Number.parseFloat(eval(num * 0.25)).toExponential(fixedValue);
    else if (method === "sabin to section") return Number.parseFloat(eval(num * 3.587006427E-8)).toExponential(fixedValue);
    else if (method === "arpent to section") return Number.parseFloat(eval(num * 0.000043343)).toExponential(fixedValue);
    else if (method === "cuerda to section") return Number.parseFloat(eval(num * 0.0015175342)).toExponential(fixedValue);
    else if (method === "plaza to section") return Number.parseFloat(eval(num * 0.0024710538)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to section") return Number.parseFloat(eval(num * 2.697838639E-7)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to section") return Number.parseFloat(eval(num * 0.0000024281)).toExponential(fixedValue);
    else if (method === "electron_cross_section to section") return Number.parseFloat(eval(num * 2.568529783E-35)).toExponential(fixedValue);
};
export const arce_Calculation = (method, num) => {
    if (method === "square_meter to arce") return Number.parseFloat(eval(num * 0.0002471054)).toExponential(fixedValue);
    else if (method === "square_kilometer to arce") return Number.parseFloat(num * 247.10538147).toExponential(fixedValue);
    else if (method === "square_hectometer to arce") return Number.parseFloat(num * 2.4710538147).toExponential(fixedValue);
    else if (method === "square_dekameter to arce") return Number.parseFloat(eval(num * 0.0247105381)).toExponential(fixedValue);
    else if (method === "square_decimeter to arce") return Number.parseFloat(eval(num * 0.0000024711)).toExponential(fixedValue);
    else if (method === "square_centimeter to arce") return Number.parseFloat(eval(num * 2.471053814E-8)).toExponential(fixedValue);
    else if (method === "square_milimeter to arce") return Number.parseFloat(eval(num * 2.471053814E-10)).toExponential(fixedValue);
    else if (method === "square_micrometer to arce") return Number.parseFloat(eval(num * 2.471053814E-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to arce") return Number.parseFloat(eval(num * 2.471053814E-22)).toExponential(fixedValue);
    else if (method === "hectare to arce") return Number.parseFloat(eval(num * 2.4710538147)).toExponential(fixedValue);
    else if (method === "are to arce") return Number.parseFloat(eval(num * 0.0247105381)).toExponential(fixedValue);
    else if (method === "barn to arce") return Number.parseFloat(eval(num * 2.471053814E-32)).toExponential(fixedValue);
    else if (method === "square_mile to arce") return Number.parseFloat(eval(num * 640)).toExponential(fixedValue);
    else if (method === "square_mile_us to arce") return Number.parseFloat(eval(num * 640.00256001)).toExponential(fixedValue);
    else if (method === "square_yard to arce") return Number.parseFloat(eval(num * 0.0002066116)).toExponential(fixedValue);
    else if (method === "square_foot to arce") return Number.parseFloat(eval(num * 0.0000229568)).toExponential(fixedValue);
    else if (method === "square_foot_us to arce") return Number.parseFloat(eval(num * 0.0000229569)).toExponential(fixedValue);
    else if (method === "square_inch to arce") return Number.parseFloat(eval(num * 1.594225079E-7)).toExponential(fixedValue);
    else if (method === "circular_inch to arce") return Number.parseFloat(eval(num * 1.252101449E-7)).toExponential(fixedValue);
    else if (method === "township to arce") return Number.parseFloat(eval(num * 23040)).toExponential(fixedValue);
    else if (method === "section to arce") return Number.parseFloat(eval(num * 640)).toExponential(fixedValue);
    else if (method === "arce_us to arce") return Number.parseFloat(eval(num * 1.000004)).toExponential(fixedValue);
    else if (method === "rood to arce") return Number.parseFloat(eval(num * 0.25)).toExponential(fixedValue);
    else if (method === "square_chain to arce") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "square_rod to arce") return Number.parseFloat(eval(num * 0.00625)).toExponential(fixedValue);
    else if (method === "square_rod_us to arce") return Number.parseFloat(eval(num * 0.006250025)).toExponential(fixedValue);
    else if (method === "square_perch to arce") return Number.parseFloat(eval(num * 0.00625)).toExponential(fixedValue);
    else if (method === "square_pole to arce") return Number.parseFloat(eval(num * 0.00625)).toExponential(fixedValue);
    else if (method === "square_mil to arce") return Number.parseFloat(eval(num * 1.594225079E-13)).toExponential(fixedValue);
    else if (method === "circular_mil to arce") return Number.parseFloat(eval(num * 1.252101449E-13)).toExponential(fixedValue);
    else if (method === "homestead to arce") return Number.parseFloat(eval(num * 160)).toExponential(fixedValue);
    else if (method === "sabin to arce") return Number.parseFloat(eval(num * 0.000022956)).toExponential(fixedValue);
    else if (method === "arpent to arce") return Number.parseFloat(eval(num * 0.9986225895)).toExponential(fixedValue);
    else if (method === "cuerda to arce") return Number.parseFloat(eval(num * 0.9712219102)).toExponential(fixedValue);
    else if (method === "plaza to arce") return Number.parseFloat(eval(num * 1.5814744414)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to arce") return Number.parseFloat(eval(num * 0.0001726617)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to arce") return Number.parseFloat(eval(num * 0.0015539551)).toExponential(fixedValue);
    else if (method === "electron_cross_section to arce") return Number.parseFloat(eval(num * 1.643859061E-32)).toExponential(fixedValue);
};
export const arceUs_Calculation = (method, num) => {
    if (method === "square_meter to arce_us") return Number.parseFloat(eval(num * 0.0002471044)).toExponential(fixedValue);
    else if (method === "square_kilometer to arce_us") return Number.parseFloat(num * 247.10439305).toExponential(fixedValue);
    else if (method === "square_hectometer to arce_us") return Number.parseFloat(num * 2.4710439305).toExponential(fixedValue);
    else if (method === "square_dekameter to arce_us") return Number.parseFloat(eval(num * 0.0247104393)).toExponential(fixedValue);
    else if (method === "square_decimeter to arce_us") return Number.parseFloat(eval(num * 0.000002471)).toExponential(fixedValue);
    else if (method === "square_centimeter to arce_us") return Number.parseFloat(eval(num * 2.47104393E-8)).toExponential(fixedValue);
    else if (method === "square_milimeter to arce_us") return Number.parseFloat(eval(num * 2.47104393E-10)).toExponential(fixedValue);
    else if (method === "square_micrometer to arce_us") return Number.parseFloat(eval(num * 2.47104393E-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to arce_us") return Number.parseFloat(eval(num * 2.47104393E-22)).toExponential(fixedValue);
    else if (method === "hectare to arce_us") return Number.parseFloat(eval(num * 2.4710439305)).toExponential(fixedValue);
    else if (method === "are to arce_us") return Number.parseFloat(eval(num * 0.0247104393)).toExponential(fixedValue);
    else if (method === "barn to arce_us") return Number.parseFloat(eval(num * 2.47104393E-32)).toExponential(fixedValue);
    else if (method === "square_mile to arce_us") return Number.parseFloat(eval(num * 639.99744)).toExponential(fixedValue);
    else if (method === "square_mile_us to arce_us") return Number.parseFloat(eval(num * 640)).toExponential(fixedValue);
    else if (method === "square_yard to arce_us") return Number.parseFloat(eval(num * 0.0002066107)).toExponential(fixedValue);
    else if (method === "square_foot to arce_us") return Number.parseFloat(eval(num * 0.0000229567)).toExponential(fixedValue);
    else if (method === "square_foot_us to arce_us") return Number.parseFloat(eval(num * 0.0000229568)).toExponential(fixedValue);
    else if (method === "square_inch to arce_us") return Number.parseFloat(eval(num * 1.594218702E-7)).toExponential(fixedValue);
    else if (method === "circular_inch to arce_us") return Number.parseFloat(eval(num * 1.25209644E-7)).toExponential(fixedValue);
    else if (method === "township to arce_us") return Number.parseFloat(eval(num * 23039.90784)).toExponential(fixedValue);
    else if (method === "section to arce_us") return Number.parseFloat(eval(num * 639.99744)).toExponential(fixedValue);
    else if (method === "arce to arce_us") return Number.parseFloat(eval(num * 0.999996)).toExponential(fixedValue);
    else if (method === "rood to arce_us") return Number.parseFloat(eval(num * 0.249999)).toExponential(fixedValue);
    else if (method === "square_chain to arce_us") return Number.parseFloat(eval(num * 0.0999996)).toExponential(fixedValue);
    else if (method === "square_rod to arce_us") return Number.parseFloat(eval(num * 0.006249975)).toExponential(fixedValue);
    else if (method === "square_rod_us to arce_us") return Number.parseFloat(eval(num * 0.00625)).toExponential(fixedValue);
    else if (method === "square_perch to arce_us") return Number.parseFloat(eval(num * 0.006249975)).toExponential(fixedValue);
    else if (method === "square_pole to arce_us") return Number.parseFloat(eval(num * 0.006249975)).toExponential(fixedValue);
    else if (method === "square_mil to arce_us") return Number.parseFloat(eval(num * 1.594218702E-13)).toExponential(fixedValue);
    else if (method === "circular_mil to arce_us") return Number.parseFloat(eval(num * 1.25209644E-13)).toExponential(fixedValue);
    else if (method === "homestead to arce_us") return Number.parseFloat(eval(num * 159.99936)).toExponential(fixedValue);
    else if (method === "sabin to arce_us") return Number.parseFloat(eval(num * 0.0000229567)).toExponential(fixedValue);
    else if (method === "arpent to arce_us") return Number.parseFloat(eval(num * 0.998618595)).toExponential(fixedValue);
    else if (method === "cuerda to arce_us") return Number.parseFloat(eval(num * 0.9712180253)).toExponential(fixedValue);
    else if (method === "plaza to arce_us") return Number.parseFloat(eval(num * 1.5814681155)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to arce_us") return Number.parseFloat(eval(num * 0.000172661)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to arce_us") return Number.parseFloat(eval(num * 0.0015539488)).toExponential(fixedValue);
    else if (method === "electron_cross_section to arce_us") return Number.parseFloat(eval(num * 1.643852485E-32)).toExponential(fixedValue);
};
export const squareChain_Calculation = (method, num) => {
    if (method === "square_meter to square_chain") return Number.parseFloat(eval(num * 0.0024710538)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_chain") return Number.parseFloat(num * 2471.0538147).toExponential(fixedValue);
    else if (method === "square_hectometer to square_chain") return Number.parseFloat(num * 24.710538147).toExponential(fixedValue);
    else if (method === "square_dekameter to square_chain") return Number.parseFloat(eval(num * 0.2471053815)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_chain") return Number.parseFloat(eval(num * 0.0000247105)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_chain") return Number.parseFloat(eval(num * 2.471053814E-7)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_chain") return Number.parseFloat(eval(num * 2.471053814E-9)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_chain") return Number.parseFloat(eval(num * 2.471053814E-15)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_chain") return Number.parseFloat(eval(num * 2.471053814E-21)).toExponential(fixedValue);
    else if (method === "hectare to square_chain") return Number.parseFloat(eval(num * 24.710538147)).toExponential(fixedValue);
    else if (method === "are to square_chain") return Number.parseFloat(eval(num * 0.2471053815)).toExponential(fixedValue);
    else if (method === "barn to square_chain") return Number.parseFloat(eval(num * 2.471053814E-31)).toExponential(fixedValue);
    else if (method === "square_mile to square_chain") return Number.parseFloat(eval(num * 6400)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_chain") return Number.parseFloat(eval(num * 6400.0256001)).toExponential(fixedValue);
    else if (method === "square_yard to square_chain") return Number.parseFloat(eval(num * 0.0020661157)).toExponential(fixedValue);
    else if (method === "square_foot to square_chain") return Number.parseFloat(eval(num * 0.0002295684)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_chain") return Number.parseFloat(eval(num * 0.0002295693)).toExponential(fixedValue);
    else if (method === "square_inch to square_chain") return Number.parseFloat(eval(num * 0.0000015942)).toExponential(fixedValue);
    else if (method === "circular_inch to square_chain") return Number.parseFloat(eval(num * 0.0000012521)).toExponential(fixedValue);
    else if (method === "township to square_chain") return Number.parseFloat(eval(num * 230400)).toExponential(fixedValue);
    else if (method === "section to square_chain") return Number.parseFloat(eval(num * 6400)).toExponential(fixedValue);
    else if (method === "arce to square_chain") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "arce_us to square_chain") return Number.parseFloat(eval(num * 10.00004)).toExponential(fixedValue);
    else if (method === "rood to square_chain") return Number.parseFloat(eval(num * 2.5)).toExponential(fixedValue);
    else if (method === "square_rod to square_chain") return Number.parseFloat(eval(num * 0.0625)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_chain") return Number.parseFloat(eval(num * 0.06250025)).toExponential(fixedValue);
    else if (method === "square_perch to square_chain") return Number.parseFloat(eval(num * 0.0625)).toExponential(fixedValue);
    else if (method === "square_pole to square_chain") return Number.parseFloat(eval(num * 0.0625)).toExponential(fixedValue);
    else if (method === "square_mil to square_chain") return Number.parseFloat(eval(num * 1.594225079E-12)).toExponential(fixedValue);
    else if (method === "circular_mil to square_chain") return Number.parseFloat(eval(num * 1.252101449E-12)).toExponential(fixedValue);
    else if (method === "homestead to square_chain") return Number.parseFloat(eval(num * 1600)).toExponential(fixedValue);
    else if (method === "sabin to square_chain") return Number.parseFloat(eval(num * 0.0002295684)).toExponential(fixedValue);
    else if (method === "arpent to square_chain") return Number.parseFloat(eval(num * 9.9862258953)).toExponential(fixedValue);
    else if (method === "cuerda to square_chain") return Number.parseFloat(eval(num * 9.7122191023)).toExponential(fixedValue);
    else if (method === "plaza to square_chain") return Number.parseFloat(eval(num * 15.814744414)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_chain") return Number.parseFloat(eval(num * 0.0017266167)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_chain") return Number.parseFloat(eval(num * 0.0155395506)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_chain") return Number.parseFloat(eval(num * 1.643859061E-31)).toExponential(fixedValue);
};
export const squareRod_Calculation = (method, num) => {
    if (method === "square_meter to square_rod") return Number.parseFloat(eval(num * 0.039536861)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_rod") return Number.parseFloat(num * 39536.861035).toExponential(fixedValue);
    else if (method === "square_hectometer to square_rod") return Number.parseFloat(num * 395.36861035).toExponential(fixedValue);
    else if (method === "square_dekameter to square_rod") return Number.parseFloat(eval(num * 3.9536861035)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_rod") return Number.parseFloat(eval(num * 0.0003953686)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_rod") return Number.parseFloat(eval(num * 0.0000039537)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_rod") return Number.parseFloat(eval(num * 3.953686103E-8)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_rod") return Number.parseFloat(eval(num * 3.953686103E-14)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_rod") return Number.parseFloat(eval(num * 3.953686103E-20)).toExponential(fixedValue);
    else if (method === "hectare to square_rod") return Number.parseFloat(eval(num * 395.36861035)).toExponential(fixedValue);
    else if (method === "are to square_rod") return Number.parseFloat(eval(num * 3.9536861035)).toExponential(fixedValue);
    else if (method === "barn to square_rod") return Number.parseFloat(eval(num * 3.953686103E-30)).toExponential(fixedValue);
    else if (method === "square_mile to square_rod") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_rod") return Number.parseFloat(eval(num * 102400.4096)).toExponential(fixedValue);
    else if (method === "square_yard to square_rod") return Number.parseFloat(eval(num * 0.0330578512)).toExponential(fixedValue);
    else if (method === "square_foot to square_rod") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_rod") return Number.parseFloat(eval(num * 0.0036731093)).toExponential(fixedValue);
    else if (method === "square_inch to square_rod") return Number.parseFloat(eval(num * 0.0000255076)).toExponential(fixedValue);
    else if (method === "circular_inch to square_rod") return Number.parseFloat(eval(num * 0.0000200336)).toExponential(fixedValue);
    else if (method === "township to square_rod") return Number.parseFloat(eval(num * 3686400)).toExponential(fixedValue);
    else if (method === "section to square_rod") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "arce to square_rod") return Number.parseFloat(eval(num * 160)).toExponential(fixedValue);
    else if (method === "arce_us to square_rod") return Number.parseFloat(eval(num * 160.00064)).toExponential(fixedValue);
    else if (method === "rood to square_rod") return Number.parseFloat(eval(num * 40)).toExponential(fixedValue);
    else if (method === "square_chain to square_rod") return Number.parseFloat(eval(num * 16)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_rod") return Number.parseFloat(eval(num * 1.000004)).toExponential(fixedValue);
    else if (method === "square_perch to square_rod") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_pole to square_rod") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_mil to square_rod") return Number.parseFloat(eval(num * 2.550760126E-11)).toExponential(fixedValue);
    else if (method === "circular_mil to square_rod") return Number.parseFloat(eval(num * 2.003362318E-11)).toExponential(fixedValue);
    else if (method === "homestead to square_rod") return Number.parseFloat(eval(num * 25600)).toExponential(fixedValue);
    else if (method === "sabin to square_rod") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "arpent to square_rod") return Number.parseFloat(eval(num * 159.77961433)).toExponential(fixedValue);
    else if (method === "cuerda to square_rod") return Number.parseFloat(eval(num * 155.39550564)).toExponential(fixedValue);
    else if (method === "plaza to square_rod") return Number.parseFloat(eval(num * 253.03591062)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_rod") return Number.parseFloat(eval(num * 0.0276258677)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_rod") return Number.parseFloat(eval(num * 0.248632809)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_rod") return Number.parseFloat(eval(num * 2.630174498E-30)).toExponential(fixedValue);
};
export const squareRodUs_Calculation = (method, num) => {
    if (method === "square_meter to square_rod_us") return Number.parseFloat(eval(num * 0.0395367029)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_rod_us") return Number.parseFloat(num * 39536.702887).toExponential(fixedValue);
    else if (method === "square_hectometer to square_rod_us") return Number.parseFloat(num * 395.36702887).toExponential(fixedValue);
    else if (method === "square_dekameter to square_rod_us") return Number.parseFloat(eval(num * 3.9536702887)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_rod_us") return Number.parseFloat(eval(num * 0.000395367)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_rod_us") return Number.parseFloat(eval(num * 0.0000039537)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_rod_us") return Number.parseFloat(eval(num * 3.953670288E-8)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_rod_us") return Number.parseFloat(eval(num * 3.953670288E-14)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_rod_us") return Number.parseFloat(eval(num * 3.953670288E-20)).toExponential(fixedValue);
    else if (method === "hectare to square_rod_us") return Number.parseFloat(eval(num * 395.36702887)).toExponential(fixedValue);
    else if (method === "are to square_rod_us") return Number.parseFloat(eval(num * 3.9536702887)).toExponential(fixedValue);
    else if (method === "barn to square_rod_us") return Number.parseFloat(eval(num * 3.953670288E-30)).toExponential(fixedValue);
    else if (method === "square_mile to square_rod_us") return Number.parseFloat(eval(num * 102399.5904)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_rod_us") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "square_yard to square_rod_us") return Number.parseFloat(eval(num * 0.033057719)).toExponential(fixedValue);
    else if (method === "square_foot to square_rod_us") return Number.parseFloat(eval(num * 0.0036730799)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_rod_us") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "square_inch to square_rod_us") return Number.parseFloat(eval(num * 0.0000255075)).toExponential(fixedValue);
    else if (method === "circular_inch to square_rod_us") return Number.parseFloat(eval(num * 0.0000200335)).toExponential(fixedValue);
    else if (method === "township to square_rod_us") return Number.parseFloat(eval(num * 3686385.2544)).toExponential(fixedValue);
    else if (method === "section to square_rod_us") return Number.parseFloat(eval(num * 102399.5904)).toExponential(fixedValue);
    else if (method === "arce to square_rod_us") return Number.parseFloat(eval(num * 159.99936)).toExponential(fixedValue);
    else if (method === "arce_us to square_rod_us") return Number.parseFloat(eval(num * 160)).toExponential(fixedValue);
    else if (method === "rood to square_rod_us") return Number.parseFloat(eval(num * 39.99984)).toExponential(fixedValue);
    else if (method === "square_chain to square_rod_us") return Number.parseFloat(eval(num * 15.999936)).toExponential(fixedValue);
    else if (method === "square_rod to square_rod_us") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_perch to square_rod_us") return Number.parseFloat(eval(num * 0.999996)).toExponential(fixedValue);
    else if (method === "square_pole to square_rod_us") return Number.parseFloat(eval(num * 0.999996)).toExponential(fixedValue);
    else if (method === "square_mil to square_rod_us") return Number.parseFloat(eval(num * 2.550749923E-11)).toExponential(fixedValue);
    else if (method === "circular_mil to square_rod_us") return Number.parseFloat(eval(num * 2.003354305E-11)).toExponential(fixedValue);
    else if (method === "homestead to square_rod_us") return Number.parseFloat(eval(num * 25599.8976)).toExponential(fixedValue);
    else if (method === "sabin to square_rod_us") return Number.parseFloat(eval(num * 0.0036730799)).toExponential(fixedValue);
    else if (method === "arpent to square_rod_us") return Number.parseFloat(eval(num * 159.77897521)).toExponential(fixedValue);
    else if (method === "cuerda to square_rod_us") return Number.parseFloat(eval(num * 155.39488406)).toExponential(fixedValue);
    else if (method === "plaza to square_rod_us") return Number.parseFloat(eval(num * 253.03489848)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_rod_us") return Number.parseFloat(eval(num * 0.0276257572)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_rod_us") return Number.parseFloat(eval(num * 0.2486318145)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_rod_us") return Number.parseFloat(eval(num * 2.630163977E-30)).toExponential(fixedValue);
};
export const squarePerch_Calculation = (method, num) => {
    if (method === "square_meter to square_perch") return Number.parseFloat(eval(num * 0.039536861)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_perch") return Number.parseFloat(num * 39536.861035).toExponential(fixedValue);
    else if (method === "square_hectometer to square_perch") return Number.parseFloat(num * 395.36861035).toExponential(fixedValue);
    else if (method === "square_dekameter to square_perch") return Number.parseFloat(eval(num * 3.9536861035)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_perch") return Number.parseFloat(eval(num * 0.0003953686)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_perch") return Number.parseFloat(eval(num * 0.0000039537)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_perch") return Number.parseFloat(eval(num * 3.953686103E-8)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_perch") return Number.parseFloat(eval(num * 3.953686103E-14)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_perch") return Number.parseFloat(eval(num * 3.953686103E-20)).toExponential(fixedValue);
    else if (method === "hectare to square_perch") return Number.parseFloat(eval(num * 395.36861035)).toExponential(fixedValue);
    else if (method === "are to square_perch") return Number.parseFloat(eval(num * 3.9536861035)).toExponential(fixedValue);
    else if (method === "barn to square_perch") return Number.parseFloat(eval(num * 3.953686103E-30)).toExponential(fixedValue);
    else if (method === "square_mile to square_perch") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_perch") return Number.parseFloat(eval(num * 102400.4096)).toExponential(fixedValue);
    else if (method === "square_yard to square_perch") return Number.parseFloat(eval(num * 0.0330578512)).toExponential(fixedValue);
    else if (method === "square_foot to square_perch") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_perch") return Number.parseFloat(eval(num * 0.0036731093)).toExponential(fixedValue);
    else if (method === "square_inch to square_perch") return Number.parseFloat(eval(num * 0.0000255076)).toExponential(fixedValue);
    else if (method === "circular_inch to square_perch") return Number.parseFloat(eval(num * 0.0000200336)).toExponential(fixedValue);
    else if (method === "township to square_perch") return Number.parseFloat(eval(num * 3686400)).toExponential(fixedValue);
    else if (method === "section to square_perch") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "arce to square_perch") return Number.parseFloat(eval(num * 160)).toExponential(fixedValue);
    else if (method === "arce_us to square_perch") return Number.parseFloat(eval(num * 160.00064)).toExponential(fixedValue);
    else if (method === "rood to square_perch") return Number.parseFloat(eval(num * 40)).toExponential(fixedValue);
    else if (method === "square_chain to square_perch") return Number.parseFloat(eval(num * 16)).toExponential(fixedValue);
    else if (method === "square_rod to square_perch") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_perch") return Number.parseFloat(eval(num * 1.000004)).toExponential(fixedValue);
    else if (method === "square_pole to square_perch") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_mil to square_perch") return Number.parseFloat(eval(num * 2.550760126E-11)).toExponential(fixedValue);
    else if (method === "circular_mil to square_perch") return Number.parseFloat(eval(num * 2.003362318E-11)).toExponential(fixedValue);
    else if (method === "homestead to square_perch") return Number.parseFloat(eval(num * 25600)).toExponential(fixedValue);
    else if (method === "sabin to square_perch") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "arpent to square_perch") return Number.parseFloat(eval(num * 159.77961433)).toExponential(fixedValue);
    else if (method === "cuerda to square_perch") return Number.parseFloat(eval(num * 155.39550564)).toExponential(fixedValue);
    else if (method === "plaza to square_perch") return Number.parseFloat(eval(num * 253.03591062)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_perch") return Number.parseFloat(eval(num * 0.0276258677)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_perch") return Number.parseFloat(eval(num * 0.248632809)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_perch") return Number.parseFloat(eval(num * 2.630174498E-30)).toExponential(fixedValue);
};
export const squarePole_Calculation = (method, num) => {
    if (method === "square_meter to square_pole") return Number.parseFloat(eval(num * 0.039536861)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_pole") return Number.parseFloat(num * 39536.861035).toExponential(fixedValue);
    else if (method === "square_hectometer to square_pole") return Number.parseFloat(num * 395.36861035).toExponential(fixedValue);
    else if (method === "square_dekameter to square_pole") return Number.parseFloat(eval(num * 3.9536861035)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_pole") return Number.parseFloat(eval(num * 0.0003953686)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_pole") return Number.parseFloat(eval(num * 0.0000039537)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_pole") return Number.parseFloat(eval(num * 3.953686103E-8)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_pole") return Number.parseFloat(eval(num * 3.953686103E-14)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_pole") return Number.parseFloat(eval(num * 3.953686103E-20)).toExponential(fixedValue);
    else if (method === "hectare to square_pole") return Number.parseFloat(eval(num * 395.36861035)).toExponential(fixedValue);
    else if (method === "are to square_pole") return Number.parseFloat(eval(num * 3.9536861035)).toExponential(fixedValue);
    else if (method === "barn to square_pole") return Number.parseFloat(eval(num * 3.953686103E-30)).toExponential(fixedValue);
    else if (method === "square_mile to square_pole") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_pole") return Number.parseFloat(eval(num * 102400.4096)).toExponential(fixedValue);
    else if (method === "square_yard to square_pole") return Number.parseFloat(eval(num * 0.0330578512)).toExponential(fixedValue);
    else if (method === "square_foot to square_pole") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_pole") return Number.parseFloat(eval(num * 0.0036731093)).toExponential(fixedValue);
    else if (method === "square_inch to square_pole") return Number.parseFloat(eval(num * 0.0000255076)).toExponential(fixedValue);
    else if (method === "circular_inch to square_pole") return Number.parseFloat(eval(num * 0.0000200336)).toExponential(fixedValue);
    else if (method === "township to square_pole") return Number.parseFloat(eval(num * 3686400)).toExponential(fixedValue);
    else if (method === "section to square_pole") return Number.parseFloat(eval(num * 102400)).toExponential(fixedValue);
    else if (method === "arce to square_pole") return Number.parseFloat(eval(num * 160)).toExponential(fixedValue);
    else if (method === "arce_us to square_pole") return Number.parseFloat(eval(num * 160.00064)).toExponential(fixedValue);
    else if (method === "rood to square_pole") return Number.parseFloat(eval(num * 40)).toExponential(fixedValue);
    else if (method === "square_chain to square_pole") return Number.parseFloat(eval(num * 16)).toExponential(fixedValue);
    else if (method === "square_rod to square_pole") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_pole") return Number.parseFloat(eval(num * 1.000004)).toExponential(fixedValue);
    else if (method === "square_perch to square_pole") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_mil to square_pole") return Number.parseFloat(eval(num * 2.550760126E-11)).toExponential(fixedValue);
    else if (method === "circular_mil to square_pole") return Number.parseFloat(eval(num * 2.003362318E-11)).toExponential(fixedValue);
    else if (method === "homestead to square_pole") return Number.parseFloat(eval(num * 25600)).toExponential(fixedValue);
    else if (method === "sabin to square_pole") return Number.parseFloat(eval(num * 0.0036730946)).toExponential(fixedValue);
    else if (method === "arpent to square_pole") return Number.parseFloat(eval(num * 159.77961433)).toExponential(fixedValue);
    else if (method === "cuerda to square_pole") return Number.parseFloat(eval(num * 155.39550564)).toExponential(fixedValue);
    else if (method === "plaza to square_pole") return Number.parseFloat(eval(num * 253.03591062)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_pole") return Number.parseFloat(eval(num * 0.0276258677)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_pole") return Number.parseFloat(eval(num * 0.248632809)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_pole") return Number.parseFloat(eval(num * 2.630174498E-30)).toExponential(fixedValue);
};
export const squareMil_Calculation = (method, num) => {
    if (method === "square_meter to square_mil") return Number.parseFloat(eval(num * 1550003100)).toExponential(fixedValue);
    else if (method === "square_kilometer to square_mil") return Number.parseFloat(num * 1550003100006200).toExponential(fixedValue);
    else if (method === "square_hectometer to square_mil") return Number.parseFloat(num * 15500031000062).toExponential(fixedValue);
    else if (method === "square_dekameter to square_mil") return Number.parseFloat(eval(num * 155000310001)).toExponential(fixedValue);
    else if (method === "square_decimeter to square_mil") return Number.parseFloat(eval(num * 15500031)).toExponential(fixedValue);
    else if (method === "square_centimeter to square_mil") return Number.parseFloat(eval(num * 155000.31)).toExponential(fixedValue);
    else if (method === "square_milimeter to square_mil") return Number.parseFloat(eval(num * 1550.0031)).toExponential(fixedValue);
    else if (method === "square_micrometer to square_mil") return Number.parseFloat(eval(num * 0.0015500031)).toExponential(fixedValue);
    else if (method === "square_nanometer to square_mil") return Number.parseFloat(eval(num * 1.5500031E-9)).toExponential(fixedValue);
    else if (method === "hectare to square_mil") return Number.parseFloat(eval(num * 15500031000062)).toExponential(fixedValue);
    else if (method === "are to square_mil") return Number.parseFloat(eval(num * 155000310001)).toExponential(fixedValue);
    else if (method === "barn to square_mil") return Number.parseFloat(eval(num * 1.5500031E-19)).toExponential(fixedValue);
    else if (method === "square_mile to square_mil") return Number.parseFloat(eval(num * 4014489599999957)).toExponential(fixedValue);
    else if (method === "square_mile_us to square_mil") return Number.parseFloat(eval(num * 4014505658006534)).toExponential(fixedValue);
    else if (method === "square_yard to square_mil") return Number.parseFloat(eval(num * 1296000000)).toExponential(fixedValue);
    else if (method === "square_foot to square_mil") return Number.parseFloat(eval(num * 144000000)).toExponential(fixedValue);
    else if (method === "square_foot_us to square_mil") return Number.parseFloat(eval(num * 144000576)).toExponential(fixedValue);
    else if (method === "square_inch to square_mil") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "circular_inch to square_mil") return Number.parseFloat(eval(num * 0.7853981634)).toExponential(fixedValue);
    else if (method === "township to square_mil") return Number.parseFloat(eval(num * 144521625600005200)).toExponential(fixedValue);
    else if (method === "section to square_mil") return Number.parseFloat(eval(num * 4014489599999957)).toExponential(fixedValue);
    else if (method === "arce to square_mil") return Number.parseFloat(eval(num * 6272640000000)).toExponential(fixedValue);
    else if (method === "arce_us to square_mil") return Number.parseFloat(eval(num * 6272665090635)).toExponential(fixedValue);
    else if (method === "rood to square_mil") return Number.parseFloat(eval(num * 1568160000000)).toExponential(fixedValue);
    else if (method === "square_chain to square_mil") return Number.parseFloat(eval(num * 627264000000)).toExponential(fixedValue);
    else if (method === "square_rod to square_mil") return Number.parseFloat(eval(num * 39204000000)).toExponential(fixedValue);
    else if (method === "square_rod_us to square_mil") return Number.parseFloat(eval(num * 39204156816)).toExponential(fixedValue);
    else if (method === "square_perch to square_mil") return Number.parseFloat(eval(num * 39204000000)).toExponential(fixedValue);
    else if (method === "square_pole to square_mil") return Number.parseFloat(eval(num * 39204000000)).toExponential(fixedValue);
    else if (method === "circular_mil to square_mil") return Number.parseFloat(eval(num * 0.7853981634)).toExponential(fixedValue);
    else if (method === "homestead to square_mil") return Number.parseFloat(eval(num * 1003622399999989)).toExponential(fixedValue);
    else if (method === "sabin to square_mil") return Number.parseFloat(eval(num * 144000000)).toExponential(fixedValue);
    else if (method === "arpent to square_mil") return Number.parseFloat(eval(num * 62640000000003)).toExponential(fixedValue);
    else if (method === "cuerda to square_mil") return Number.parseFloat(eval(num * 6092125403001)).toExponential(fixedValue);
    else if (method === "plaza to square_mil") return Number.parseFloat(eval(num * 9920019840040)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to square_mil") return Number.parseFloat(eval(num * 1083044516.1)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to square_mil") return Number.parseFloat(eval(num * 9747400644.8)).toExponential(fixedValue);
    else if (method === "electron_cross_section to square_mil") return Number.parseFloat(eval(num * 1.03113361E-19)).toExponential(fixedValue);
};
export const circularMil_Calculation = (method, num) => {
    if (method === "square_meter to circular_mil") return Number.parseFloat(eval(num * 1973525241.4)).toExponential(fixedValue);
    else if (method === "square_kilometer to circular_mil") return Number.parseFloat(num * 1973525241390000).toExponential(fixedValue);
    else if (method === "square_hectometer to circular_mil") return Number.parseFloat(num * 19735252413900).toExponential(fixedValue);
    else if (method === "square_dekameter to circular_mil") return Number.parseFloat(eval(num * 197352524139)).toExponential(fixedValue);
    else if (method === "square_decimeter to circular_mil") return Number.parseFloat(eval(num * 19735252.414)).toExponential(fixedValue);
    else if (method === "square_centimeter to circular_mil") return Number.parseFloat(eval(num * 197352.52414)).toExponential(fixedValue);
    else if (method === "square_milimeter to circular_mil") return Number.parseFloat(eval(num * 1973.5252414)).toExponential(fixedValue);
    else if (method === "square_micrometer to circular_mil") return Number.parseFloat(eval(num * 0.0019735252)).toExponential(fixedValue);
    else if (method === "square_nanometer to circular_mil") return Number.parseFloat(eval(num * 1.973525241E-9)).toExponential(fixedValue);
    else if (method === "hectare to circular_mil") return Number.parseFloat(eval(num * 19735252413900)).toExponential(fixedValue);
    else if (method === "are to circular_mil") return Number.parseFloat(eval(num * 197352524139)).toExponential(fixedValue);
    else if (method === "barn to circular_mil") return Number.parseFloat(eval(num * 1.973525241E-19)).toExponential(fixedValue);
    else if (method === "square_mile to circular_mil") return Number.parseFloat(eval(num * 5111406910648030)).toExponential(fixedValue);
    else if (method === "square_mile_us to circular_mil") return Number.parseFloat(eval(num * 5111427356337012)).toExponential(fixedValue);
    else if (method === "square_yard to circular_mil") return Number.parseFloat(eval(num * 1650118450)).toExponential(fixedValue);
    else if (method === "square_foot to circular_mil") return Number.parseFloat(eval(num * 183346494.44)).toExponential(fixedValue);
    else if (method === "square_foot_us to circular_mil") return Number.parseFloat(eval(num * 183347227.83)).toExponential(fixedValue);
    else if (method === "square_inch to circular_mil") return Number.parseFloat(eval(num * 1273239.5447)).toExponential(fixedValue);
    else if (method === "circular_inch to circular_mil") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "township to circular_mil") return Number.parseFloat(eval(num * 184010648783337630)).toExponential(fixedValue);
    else if (method === "section to circular_mil") return Number.parseFloat(eval(num * 5111406910648030)).toExponential(fixedValue);
    else if (method === "arce to circular_mil") return Number.parseFloat(eval(num * 7986573297887)).toExponential(fixedValue);
    else if (method === "arce_us to circular_mil") return Number.parseFloat(eval(num * 7986605244277)).toExponential(fixedValue);
    else if (method === "rood to circular_mil") return Number.parseFloat(eval(num * 1996643324472)).toExponential(fixedValue);
    else if (method === "square_chain to circular_mil") return Number.parseFloat(eval(num * 798657329789)).toExponential(fixedValue);
    else if (method === "square_rod to circular_mil") return Number.parseFloat(eval(num * 49916083112)).toExponential(fixedValue);
    else if (method === "square_rod_us to circular_mil") return Number.parseFloat(eval(num * 49916282777)).toExponential(fixedValue);
    else if (method === "square_perch to circular_mil") return Number.parseFloat(eval(num * 49916083112)).toExponential(fixedValue);
    else if (method === "square_pole to circular_mil") return Number.parseFloat(eval(num * 49916083112)).toExponential(fixedValue);
    else if (method === "square_mil to circular_mil") return Number.parseFloat(eval(num * 1.2732395447)).toExponential(fixedValue);
    else if (method === "homestead to circular_mil") return Number.parseFloat(eval(num * 1277851727662007)).toExponential(fixedValue);
    else if (method === "sabin to circular_mil") return Number.parseFloat(eval(num * 183346494.44)).toExponential(fixedValue);
    else if (method === "arpent to circular_mil") return Number.parseFloat(eval(num * 7975572508221)).toExponential(fixedValue);
    else if (method === "cuerda to circular_mil") return Number.parseFloat(eval(num * 7756734974586)).toExponential(fixedValue);
    else if (method === "plaza to circular_mil") return Number.parseFloat(eval(num * 12630561544896)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to circular_mil") return Number.parseFloat(eval(num * 1378975106.6)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to circular_mil") return Number.parseFloat(eval(num * 12410775959)).toExponential(fixedValue);
    else if (method === "electron_cross_section to circular_mil") return Number.parseFloat(eval(num * 1.312880088E-19)).toExponential(fixedValue);
};
export const homestead_calculation = (method, num) => {
    if (method === "square_meter to homestead") return Number.parseFloat(eval(num * 0.0000015444)).toExponential(fixedValue);
    else if (method === "square_kilometer to homestead") return Number.parseFloat(num * 1.5444086342).toExponential(fixedValue);
    else if (method === "square_hectometer to homestead") return Number.parseFloat(num * 0.0154440863).toExponential(fixedValue);
    else if (method === "square_dekameter to homestead") return Number.parseFloat(eval(num * 0.0001544409)).toExponential(fixedValue);
    else if (method === "square_decimeter to homestead") return Number.parseFloat(eval(num * 1.544408634E-8)).toExponential(fixedValue);
    else if (method === "square_centimeter to homestead") return Number.parseFloat(eval(num * 1.544408634E-10)).toExponential(fixedValue);
    else if (method === "square_milimeter to homestead") return Number.parseFloat(eval(num * 1.544408634E-12)).toExponential(fixedValue);
    else if (method === "square_micrometer to homestead") return Number.parseFloat(eval(num * 1.544408634E-18)).toExponential(fixedValue);
    else if (method === "square_nanometer to homestead") return Number.parseFloat(eval(num * 1.544408634E-24)).toExponential(fixedValue);
    else if (method === "hectare to homestead") return Number.parseFloat(eval(num * 0.0154440863)).toExponential(fixedValue);
    else if (method === "are to homestead") return Number.parseFloat(eval(num * 0.0001544409)).toExponential(fixedValue);
    else if (method === "barn to homestead") return Number.parseFloat(eval(num * 1.544408634E-34)).toExponential(fixedValue);
    else if (method === "square_mile to homestead") return Number.parseFloat(eval(num * 4)).toExponential(fixedValue);
    else if (method === "square_mile_us to homestead") return Number.parseFloat(eval(num * 4.000016)).toExponential(fixedValue);
    else if (method === "square_yard to homestead") return Number.parseFloat(eval(num * 0.0000012913)).toExponential(fixedValue);
    else if (method === "square_foot to homestead") return Number.parseFloat(eval(num * 1.434802571E-7)).toExponential(fixedValue);
    else if (method === "square_foot_us to homestead") return Number.parseFloat(eval(num * 1.43480831E-7)).toExponential(fixedValue);
    else if (method === "square_inch to homestead") return Number.parseFloat(eval(num * 9.963906744E-10)).toExponential(fixedValue);
    else if (method === "circular_inch to homestead") return Number.parseFloat(eval(num * 7.825634057E-10)).toExponential(fixedValue);
    else if (method === "township to homestead") return Number.parseFloat(eval(num * 144)).toExponential(fixedValue);
    else if (method === "section to homestead") return Number.parseFloat(eval(num * 4)).toExponential(fixedValue);
    else if (method === "arce to homestead") return Number.parseFloat(eval(num * 0.00625)).toExponential(fixedValue);
    else if (method === "arce_us to homestead") return Number.parseFloat(eval(num * 0.006250025)).toExponential(fixedValue);
    else if (method === "rood to homestead") return Number.parseFloat(eval(num * 0.0015625)).toExponential(fixedValue);
    else if (method === "square_chain to homestead") return Number.parseFloat(eval(num * 0.000625)).toExponential(fixedValue);
    else if (method === "square_rod to homestead") return Number.parseFloat(eval(num * 0.0000390625)).toExponential(fixedValue);
    else if (method === "square_rod_us to homestead") return Number.parseFloat(eval(num * 0.0000390627)).toExponential(fixedValue);
    else if (method === "square_perch to homestead") return Number.parseFloat(eval(num * 0.0000390625)).toExponential(fixedValue);
    else if (method === "square_pole to homestead") return Number.parseFloat(eval(num * 0.0000390625)).toExponential(fixedValue);
    else if (method === "square_mil to homestead") return Number.parseFloat(eval(num * 9.963906744E-16)).toExponential(fixedValue);
    else if (method === "circular_mil to homestead") return Number.parseFloat(eval(num * 7.825634057E-16)).toExponential(fixedValue);
    else if (method === "sabin to homestead") return Number.parseFloat(eval(num * 1.434802571E-7)).toExponential(fixedValue);
    else if (method === "arpent to homestead") return Number.parseFloat(eval(num * 0.0062413912)).toExponential(fixedValue);
    else if (method === "cuerda to homestead") return Number.parseFloat(eval(num * 0.0060701369)).toExponential(fixedValue);
    else if (method === "plaza to homestead") return Number.parseFloat(eval(num * 0.0098842153)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to homestead") return Number.parseFloat(eval(num * 0.0000010791)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to homestead") return Number.parseFloat(eval(num * 0.0000097122)).toExponential(fixedValue);
    else if (method === "electron_cross_section to homestead") return Number.parseFloat(eval(num * 1.027411913E-34)).toExponential(fixedValue);
};
export const sabin_calculation = (method, num) => {
    if (method === "square_meter to sabin") return Number.parseFloat(eval(num * 10.763910417)).toExponential(fixedValue);
    else if (method === "square_kilometer to sabin") return Number.parseFloat(num * 10763910.4172).toExponential(fixedValue);
    else if (method === "square_hectometer to sabin") return Number.parseFloat(num * 107639.10417).toExponential(fixedValue);
    else if (method === "square_dekameter to sabin") return Number.parseFloat(eval(num * 1076.3910417)).toExponential(fixedValue);
    else if (method === "square_decimeter to sabin") return Number.parseFloat(eval(num * 0.1076391042)).toExponential(fixedValue);
    else if (method === "square_centimeter to sabin") return Number.parseFloat(eval(num * 0.001076391)).toExponential(fixedValue);
    else if (method === "square_milimeter to sabin") return Number.parseFloat(eval(num * 0.0000107639)).toExponential(fixedValue);
    else if (method === "square_micrometer to sabin") return Number.parseFloat(eval(num * 1.076391041E-11)).toExponential(fixedValue);
    else if (method === "square_nanometer to sabin") return Number.parseFloat(eval(num * 1.076391041E-17)).toExponential(fixedValue);
    else if (method === "hectare to sabin") return Number.parseFloat(eval(num * 107639.10417)).toExponential(fixedValue);
    else if (method === "are to sabin") return Number.parseFloat(eval(num * 1076.3910417)).toExponential(fixedValue);
    else if (method === "barn to sabin") return Number.parseFloat(eval(num * 1.076391041E-27)).toExponential(fixedValue);
    else if (method === "square_mile to sabin") return Number.parseFloat(eval(num * 27878400)).toExponential(fixedValue);
    else if (method === "square_mile_us to sabin") return Number.parseFloat(eval(num * 27878511.514)).toExponential(fixedValue);
    else if (method === "square_yard to sabin") return Number.parseFloat(eval(num * 9)).toExponential(fixedValue);
    else if (method === "square_foot to sabin") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "square_foot_us to sabin") return Number.parseFloat(eval(num * 1.000004)).toExponential(fixedValue);
    else if (method === "square_inch to sabin") return Number.parseFloat(eval(num * 0.0069444444)).toExponential(fixedValue);
    else if (method === "circular_inch to sabin") return Number.parseFloat(eval(num * 0.0054541539)).toExponential(fixedValue);
    else if (method === "township to sabin") return Number.parseFloat(eval(num * 1003622400)).toExponential(fixedValue);
    else if (method === "section to sabin") return Number.parseFloat(eval(num * 27878400)).toExponential(fixedValue);
    else if (method === "arce to sabin") return Number.parseFloat(eval(num * 43560)).toExponential(fixedValue);
    else if (method === "arce_us to sabin") return Number.parseFloat(eval(num * 43560.174241)).toExponential(fixedValue);
    else if (method === "rood to sabin") return Number.parseFloat(eval(num * 10890)).toExponential(fixedValue);
    else if (method === "square_chain to sabin") return Number.parseFloat(eval(num * 4356)).toExponential(fixedValue);
    else if (method === "square_rod to sabin") return Number.parseFloat(eval(num * 272.25)).toExponential(fixedValue);
    else if (method === "square_rod_us to sabin") return Number.parseFloat(eval(num * 272.251089)).toExponential(fixedValue);
    else if (method === "square_perch to sabin") return Number.parseFloat(eval(num * 272.25)).toExponential(fixedValue);
    else if (method === "square_pole to sabin") return Number.parseFloat(eval(num * 272.25)).toExponential(fixedValue);
    else if (method === "square_mil to sabin") return Number.parseFloat(eval(num * 6.944444444E-9)).toExponential(fixedValue);
    else if (method === "circular_mil to sabin") return Number.parseFloat(eval(num * 5.454153912E-9)).toExponential(fixedValue);
    else if (method === "homestead to sabin") return Number.parseFloat(eval(num * 6969600)).toExponential(fixedValue);
    else if (method === "arpent to sabin") return Number.parseFloat(eval(num * 43500)).toExponential(fixedValue);
    else if (method === "cuerda to sabin") return Number.parseFloat(eval(num * 42306.42641)).toExponential(fixedValue);
    else if (method === "plaza to sabin") return Number.parseFloat(eval(num * 68889.026667)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to sabin") return Number.parseFloat(eval(num * 7.5211424728)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to sabin") return Number.parseFloat(eval(num * 67.690282256)).toExponential(fixedValue);
    else if (method === "electron_cross_section to sabin") return Number.parseFloat(eval(num * 7.160650071E-28)).toExponential(fixedValue);
};
export const arpent_calculation = (method, num) => {
    if (method === "square_meter to arpent") return Number.parseFloat(eval(num * 0.0002474462)).toExponential(fixedValue);
    else if (method === "square_kilometer to arpent") return Number.parseFloat(num * 247.44621648).toExponential(fixedValue);
    else if (method === "square_hectometer to arpent") return Number.parseFloat(num * 2.4744621648).toExponential(fixedValue);
    else if (method === "square_dekameter to arpent") return Number.parseFloat(eval(num * 0.0247446216)).toExponential(fixedValue);
    else if (method === "square_decimeter to arpent") return Number.parseFloat(eval(num * 0.0000024745)).toExponential(fixedValue);
    else if (method === "square_centimeter to arpent") return Number.parseFloat(eval(num * 2.474462164E-8)).toExponential(fixedValue);
    else if (method === "square_milimeter to arpent") return Number.parseFloat(eval(num * 2.474462164E-10)).toExponential(fixedValue);
    else if (method === "square_micrometer to arpent") return Number.parseFloat(eval(num * 2.474462164E-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to arpent") return Number.parseFloat(eval(num * 2.474462164E-22)).toExponential(fixedValue);
    else if (method === "hectare to arpent") return Number.parseFloat(eval(num * 2.4744621648)).toExponential(fixedValue);
    else if (method === "are to arpent") return Number.parseFloat(eval(num * 0.0247446216)).toExponential(fixedValue);
    else if (method === "barn to arpent") return Number.parseFloat(eval(num * 2.474462164E-32)).toExponential(fixedValue);
    else if (method === "square_mile to arpent") return Number.parseFloat(eval(num * 640.88275862)).toExponential(fixedValue);
    else if (method === "square_mile_us to arpent") return Number.parseFloat(eval(num * 640.88532216)).toExponential(fixedValue);
    else if (method === "square_yard to arpent") return Number.parseFloat(eval(num * 0.0002068966)).toExponential(fixedValue);
    else if (method === "square_foot to arpent") return Number.parseFloat(eval(num * 0.0000229885)).toExponential(fixedValue);
    else if (method === "square_foot_us to arpent") return Number.parseFloat(eval(num * 0.0000229886)).toExponential(fixedValue);
    else if (method === "square_inch to arpent") return Number.parseFloat(eval(num * 1.59642401E-7)).toExponential(fixedValue);
    else if (method === "circular_inch to arpent") return Number.parseFloat(eval(num * 1.253828485E-7)).toExponential(fixedValue);
    else if (method === "township to arpent") return Number.parseFloat(eval(num * 23071.77931)).toExponential(fixedValue);
    else if (method === "section to arpent") return Number.parseFloat(eval(num * 640.88275862)).toExponential(fixedValue);
    else if (method === "arce to arpent") return Number.parseFloat(eval(num * 1.0013793103)).toExponential(fixedValue);
    else if (method === "arce_us to arpent") return Number.parseFloat(eval(num * 1.0013833159)).toExponential(fixedValue);
    else if (method === "rood to arpent") return Number.parseFloat(eval(num * 0.2503448276)).toExponential(fixedValue);
    else if (method === "square_chain to arpent") return Number.parseFloat(eval(num * 0.100137931)).toExponential(fixedValue);
    else if (method === "square_rod to arpent") return Number.parseFloat(eval(num * 0.0062586207)).toExponential(fixedValue);
    else if (method === "square_rod_us to arpent") return Number.parseFloat(eval(num * 0.0062586457)).toExponential(fixedValue);
    else if (method === "square_perch to arpent") return Number.parseFloat(eval(num * 0.0062586207)).toExponential(fixedValue);
    else if (method === "square_pole to arpent") return Number.parseFloat(eval(num * 0.0062586207)).toExponential(fixedValue);
    else if (method === "square_mil to arpent") return Number.parseFloat(eval(num * 1.59642401E-13)).toExponential(fixedValue);
    else if (method === "circular_mil to arpent") return Number.parseFloat(eval(num * 1.253828485E-13)).toExponential(fixedValue);
    else if (method === "homestead to arpent") return Number.parseFloat(eval(num * 160.22068966)).toExponential(fixedValue);
    else if (method === "sabin to arpent") return Number.parseFloat(eval(num * 0.0000229885)).toExponential(fixedValue);
    else if (method === "cuerda to arpent") return Number.parseFloat(eval(num * 0.9725615267)).toExponential(fixedValue);
    else if (method === "plaza to arpent") return Number.parseFloat(eval(num * 68889.026667)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to arpent") return Number.parseFloat(eval(num * 0.0001728998)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to arpent") return Number.parseFloat(eval(num * 0.0015560984)).toExponential(fixedValue);
    else if (method === "electron_cross_section to arpent") return Number.parseFloat(eval(num * 1.646126453E-32)).toExponential(fixedValue);
};
export const cuerda_calculation = (method, num) => {
    if (method === "square_meter to cuerda") return Number.parseFloat(eval(num * 0.0002544273)).toExponential(fixedValue);
    else if (method === "square_kilometer to cuerda") return Number.parseFloat(num * 254.42731354).toExponential(fixedValue);
    else if (method === "square_hectometer to cuerda") return Number.parseFloat(num * 2.5442731354).toExponential(fixedValue);
    else if (method === "square_dekameter to cuerda") return Number.parseFloat(eval(num * 0.0254427314)).toExponential(fixedValue);
    else if (method === "square_decimeter to cuerda") return Number.parseFloat(eval(num * 0.0000025443)).toExponential(fixedValue);
    else if (method === "square_centimeter to cuerda") return Number.parseFloat(eval(num * 2.544273135E-8)).toExponential(fixedValue);
    else if (method === "square_milimeter to cuerda") return Number.parseFloat(eval(num * 2.544273135E-10)).toExponential(fixedValue);
    else if (method === "square_micrometer to cuerda") return Number.parseFloat(eval(num * 2.544273135E-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to cuerda") return Number.parseFloat(eval(num * 2.544273135E-22)).toExponential(fixedValue);
    else if (method === "hectare to cuerda") return Number.parseFloat(eval(num * 2.5442731354)).toExponential(fixedValue);
    else if (method === "are to cuerda") return Number.parseFloat(eval(num * 0.0254427314)).toExponential(fixedValue);
    else if (method === "barn to cuerda") return Number.parseFloat(eval(num * 2.544273135E-32)).toExponential(fixedValue);
    else if (method === "square_mile to cuerda") return Number.parseFloat(eval(num * 658.963717)).toExponential(fixedValue);
    else if (method === "square_mile_us to cuerda") return Number.parseFloat(eval(num * 658.96635286)).toExponential(fixedValue);
    else if (method === "square_yard to cuerda") return Number.parseFloat(eval(num * 0.0002127336)).toExponential(fixedValue);
    else if (method === "square_foot to cuerda") return Number.parseFloat(eval(num * 0.0000236371)).toExponential(fixedValue);
    else if (method === "square_foot_us to cuerda") return Number.parseFloat(eval(num * 0.0000236372)).toExponential(fixedValue);
    else if (method === "square_inch to cuerda") return Number.parseFloat(eval(num * 1.641463256E-7)).toExponential(fixedValue);
    else if (method === "circular_inch to cuerda") return Number.parseFloat(eval(num * 1.289202226E-7)).toExponential(fixedValue);
    else if (method === "township to cuerda") return Number.parseFloat(eval(num * 23722.693812)).toExponential(fixedValue);
    else if (method === "section to cuerda") return Number.parseFloat(eval(num * 658.963717)).toExponential(fixedValue);
    else if (method === "arce to cuerda") return Number.parseFloat(eval(num * 1.0296308078)).toExponential(fixedValue);
    else if (method === "arce_us to cuerda") return Number.parseFloat(eval(num * 1.0296349264)).toExponential(fixedValue);
    else if (method === "rood to cuerda") return Number.parseFloat(eval(num * 0.257407702)).toExponential(fixedValue);
    else if (method === "square_chain to cuerda") return Number.parseFloat(eval(num * 0.1029630808)).toExponential(fixedValue);
    else if (method === "square_rod to cuerda") return Number.parseFloat(eval(num * 0.0064351925)).toExponential(fixedValue);
    else if (method === "square_rod_us to cuerda") return Number.parseFloat(eval(num * 0.0064352183)).toExponential(fixedValue);
    else if (method === "square_perch to cuerda") return Number.parseFloat(eval(num * 0.0064351925)).toExponential(fixedValue);
    else if (method === "square_pole to cuerda") return Number.parseFloat(eval(num * 0.0064351925)).toExponential(fixedValue);
    else if (method === "square_mil to cuerda") return Number.parseFloat(eval(num * 1.641463256E-13)).toExponential(fixedValue);
    else if (method === "circular_mil to cuerda") return Number.parseFloat(eval(num * 1.289202226E-13)).toExponential(fixedValue);
    else if (method === "homestead to cuerda") return Number.parseFloat(eval(num * 164.74092925)).toExponential(fixedValue);
    else if (method === "sabin to cuerda") return Number.parseFloat(eval(num * 0.0000236371)).toExponential(fixedValue);
    else if (method === "arpent to cuerda") return Number.parseFloat(eval(num * 1.0282125836)).toExponential(fixedValue);
    else if (method === "plaza to cuerda") return Number.parseFloat(eval(num * 1.6283348066)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to cuerda") return Number.parseFloat(eval(num * 0.0001777778)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to cuerda") return Number.parseFloat(eval(num * 0.0016)).toExponential(fixedValue);
    else if (method === "electron_cross_section to cuerda") return Number.parseFloat(eval(num * 1.692567933E-32)).toExponential(fixedValue);
};
export const plaza_calculation = (method, num) => {
    if (method === "square_meter to plaza") return Number.parseFloat(eval(num * 0.00015625)).toExponential(fixedValue);
    else if (method === "square_kilometer to plaza") return Number.parseFloat(num * 156.25).toExponential(fixedValue);
    else if (method === "square_hectometer to plaza") return Number.parseFloat(num * 1.5625).toExponential(fixedValue);
    else if (method === "square_dekameter to plaza") return Number.parseFloat(eval(num * 0.015625)).toExponential(fixedValue);
    else if (method === "square_decimeter to plaza") return Number.parseFloat(eval(num * 0.0000015625)).toExponential(fixedValue);
    else if (method === "square_centimeter to plaza") return Number.parseFloat(eval(num * 1.5625E-8)).toExponential(fixedValue);
    else if (method === "square_milimeter to plaza") return Number.parseFloat(eval(num * 1.5625E-10)).toExponential(fixedValue);
    else if (method === "square_micrometer to plaza") return Number.parseFloat(eval(num * 1.5625E-16)).toExponential(fixedValue);
    else if (method === "square_nanometer to plaza") return Number.parseFloat(eval(num * 1.5625E-22)).toExponential(fixedValue);
    else if (method === "hectare to plaza") return Number.parseFloat(eval(num * 1.5625)).toExponential(fixedValue);
    else if (method === "are to plaza") return Number.parseFloat(eval(num * 0.015625)).toExponential(fixedValue);
    else if (method === "barn to plaza") return Number.parseFloat(eval(num * 1.562499999E-32)).toExponential(fixedValue);
    else if (method === "square_mile to plaza") return Number.parseFloat(eval(num * 404.68564224)).toExponential(fixedValue);
    else if (method === "square_mile_us to plaza") return Number.parseFloat(eval(num * 404.68726099)).toExponential(fixedValue);
    else if (method === "square_yard to plaza") return Number.parseFloat(eval(num * 0.0001306449)).toExponential(fixedValue);
    else if (method === "square_foot to plaza") return Number.parseFloat(eval(num * 0.0000145161)).toExponential(fixedValue);
    else if (method === "square_foot_us to plaza") return Number.parseFloat(eval(num * 0.0000145162)).toExponential(fixedValue);
    else if (method === "square_inch to plaza") return Number.parseFloat(eval(num * 0.0000145161)).toExponential(fixedValue);
    else if (method === "circular_inch to plaza") return Number.parseFloat(eval(num * 7.91730436E-8)).toExponential(fixedValue);
    else if (method === "township to plaza") return Number.parseFloat(eval(num * 14568.683121)).toExponential(fixedValue);
    else if (method === "section to plaza") return Number.parseFloat(eval(num * 404.68564224)).toExponential(fixedValue);
    else if (method === "arce to plaza") return Number.parseFloat(eval(num * 0.632321316)).toExponential(fixedValue);
    else if (method === "arce_us to plaza") return Number.parseFloat(eval(num * 0.6323238453)).toExponential(fixedValue);
    else if (method === "rood to plaza") return Number.parseFloat(eval(num * 0.158080329)).toExponential(fixedValue);
    else if (method === "square_chain to plaza") return Number.parseFloat(eval(num * 0.0632321316)).toExponential(fixedValue);
    else if (method === "square_rod to plaza") return Number.parseFloat(eval(num * 0.0039520082)).toExponential(fixedValue);
    else if (method === "square_rod_us to plaza") return Number.parseFloat(eval(num * 0.003952024)).toExponential(fixedValue);
    else if (method === "square_perch to plaza") return Number.parseFloat(eval(num * 0.0039520082)).toExponential(fixedValue);
    else if (method === "square_pole to plaza") return Number.parseFloat(eval(num * 0.0039520082)).toExponential(fixedValue);
    else if (method === "square_mil to plaza") return Number.parseFloat(eval(num * 1.0080625E-13)).toExponential(fixedValue);
    else if (method === "circular_mil to plaza") return Number.parseFloat(eval(num * 7.91730436E-14)).toExponential(fixedValue);
    else if (method === "homestead to plaza") return Number.parseFloat(eval(num * 101.17141056)).toExponential(fixedValue);
    else if (method === "sabin to plaza") return Number.parseFloat(eval(num * 0.0000145161)).toExponential(fixedValue);
    else if (method === "cuerda to plaza") return Number.parseFloat(eval(num * 0.6141243164)).toExponential(fixedValue);
    else if (method === "arpent to plaza") return Number.parseFloat(eval(num * 0.63145035)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to plaza") return Number.parseFloat(eval(num * 0.0001091777)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to plaza") return Number.parseFloat(eval(num * 0.0009825989)).toExponential(fixedValue);
    else if (method === "electron_cross_section to plaza") return Number.parseFloat(eval(num * 1.039447124E-32)).toExponential(fixedValue);
};
export const varasCastellanasCuad_calculation = (method, num) => {
    if (method === "square_meter to varas_castellanas_cuad") return Number.parseFloat(eval(num * 1.4311536386)).toExponential(fixedValue);
    else if (method === "square_kilometer to varas_castellanas_cuad") return Number.parseFloat(num * 1431153.6386).toExponential(fixedValue);
    else if (method === "square_hectometer to varas_castellanas_cuad") return Number.parseFloat(num * 14311.536386).toExponential(fixedValue);
    else if (method === "square_dekameter to varas_castellanas_cuad") return Number.parseFloat(eval(num * 143.11536386)).toExponential(fixedValue);
    else if (method === "square_decimeter to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.0143115364)).toExponential(fixedValue);
    else if (method === "square_centimeter to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.0001431154)).toExponential(fixedValue);
    else if (method === "square_milimeter to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.0000014312)).toExponential(fixedValue);
    else if (method === "square_micrometer to varas_castellanas_cuad") return Number.parseFloat(eval(num * 1.431153638E-12)).toExponential(fixedValue);
    else if (method === "square_nanometer to varas_castellanas_cuad") return Number.parseFloat(eval(num * 1.431153638E-18)).toExponential(fixedValue);
    else if (method === "hectare to varas_castellanas_cuad") return Number.parseFloat(eval(num * 14311.536386)).toExponential(fixedValue);
    else if (method === "are to varas_castellanas_cuad") return Number.parseFloat(eval(num * 143.11536386)).toExponential(fixedValue);
    else if (method === "barn to varas_castellanas_cuad") return Number.parseFloat(eval(num * 1.431153638E-28)).toExponential(fixedValue);
    else if (method === "square_mile to varas_castellanas_cuad") return Number.parseFloat(eval(num * 3706670.9081)).toExponential(fixedValue);
    else if (method === "square_mile_us to varas_castellanas_cuad") return Number.parseFloat(eval(num * 3706685.7349)).toExponential(fixedValue);
    else if (method === "square_yard to varas_castellanas_cuad") return Number.parseFloat(eval(num * 1.1966267136)).toExponential(fixedValue);
    else if (method === "square_foot to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.1329585237)).toExponential(fixedValue);
    else if (method === "square_foot_us to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.1329590556)).toExponential(fixedValue);
    else if (method === "square_inch to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.0009233231)).toExponential(fixedValue);
    else if (method === "circular_inch to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.0007251763)).toExponential(fixedValue);
    else if (method === "township to varas_castellanas_cuad") return Number.parseFloat(eval(num * 133440152.69)).toExponential(fixedValue);
    else if (method === "section to varas_castellanas_cuad") return Number.parseFloat(eval(num * 3706670.9081)).toExponential(fixedValue);
    else if (method === "arce to varas_castellanas_cuad") return Number.parseFloat(eval(num * 5791.673294)).toExponential(fixedValue);
    else if (method === "arce_us to varas_castellanas_cuad") return Number.parseFloat(eval(num * 5791.6964607)).toExponential(fixedValue);
    else if (method === "rood to varas_castellanas_cuad") return Number.parseFloat(eval(num * 1447.9183235)).toExponential(fixedValue);
    else if (method === "square_chain to varas_castellanas_cuad") return Number.parseFloat(eval(num * 579.1673294)).toExponential(fixedValue);
    else if (method === "square_rod to varas_castellanas_cuad") return Number.parseFloat(eval(num * 36.197958087)).toExponential(fixedValue);
    else if (method === "square_rod_us to varas_castellanas_cuad") return Number.parseFloat(eval(num * 36.19810288)).toExponential(fixedValue);
    else if (method === "square_perch to varas_castellanas_cuad") return Number.parseFloat(eval(num * 36.197958087)).toExponential(fixedValue);
    else if (method === "square_pole to varas_castellanas_cuad") return Number.parseFloat(eval(num * 36.197958087)).toExponential(fixedValue);
    else if (method === "square_mil to varas_castellanas_cuad") return Number.parseFloat(eval(num * 9.233230815E-10)).toExponential(fixedValue);
    else if (method === "circular_mil to varas_castellanas_cuad") return Number.parseFloat(eval(num * 7.251762524E-10)).toExponential(fixedValue);
    else if (method === "homestead to varas_castellanas_cuad") return Number.parseFloat(eval(num * 926667.72703)).toExponential(fixedValue);
    else if (method === "sabin to varas_castellanas_cuad") return Number.parseFloat(eval(num * 0.1329585237)).toExponential(fixedValue);
    else if (method === "cuerda to varas_castellanas_cuad") return Number.parseFloat(eval(num * 5625)).toExponential(fixedValue);
    else if (method === "arpent to varas_castellanas_cuad") return Number.parseFloat(eval(num * 5783.6957825)).toExponential(fixedValue);
    else if (method === "plaza to varas_castellanas_cuad") return Number.parseFloat(eval(num * 9159.3832873)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to varas_castellanas_cuad") return Number.parseFloat(eval(num * 9)).toExponential(fixedValue);
    else if (method === "electron_cross_section to varas_castellanas_cuad") return Number.parseFloat(eval(num * 9.520694624E-29)).toExponential(fixedValue);
};
export const varasConuquerasCuad_calculation = (method, num) => {
    if (method === "square_meter to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.159017071)).toExponential(fixedValue);
    else if (method === "square_kilometer to varas_conuqueras_cuad") return Number.parseFloat(num * 159017.07096).toExponential(fixedValue);
    else if (method === "square_hectometer to varas_conuqueras_cuad") return Number.parseFloat(num * 1590.1707096).toExponential(fixedValue);
    else if (method === "square_dekameter to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 15.901707096)).toExponential(fixedValue);
    else if (method === "square_decimeter to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0015901707)).toExponential(fixedValue);
    else if (method === "square_centimeter to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0000159017)).toExponential(fixedValue);
    else if (method === "square_milimeter to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1.590170709E-7)).toExponential(fixedValue);
    else if (method === "square_micrometer to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1.590170709E-13)).toExponential(fixedValue);
    else if (method === "square_nanometer to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1.590170709E-19)).toExponential(fixedValue);
    else if (method === "hectare to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1590.1707096)).toExponential(fixedValue);
    else if (method === "are to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 15.901707096)).toExponential(fixedValue);
    else if (method === "barn to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1.590170709E-29)).toExponential(fixedValue);
    else if (method === "square_mile to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 411852.32313)).toExponential(fixedValue);
    else if (method === "square_mile_us to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 411853.97054)).toExponential(fixedValue);
    else if (method === "square_yard to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.1329585237)).toExponential(fixedValue);
    else if (method === "square_foot to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0147731693)).toExponential(fixedValue);
    else if (method === "square_foot_us to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0147732284)).toExponential(fixedValue);
    else if (method === "square_inch to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0001025915)).toExponential(fixedValue);
    else if (method === "circular_inch to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0000805751)).toExponential(fixedValue);
    else if (method === "township to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 14826683.633)).toExponential(fixedValue);
    else if (method === "section to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 411852.32313)).toExponential(fixedValue);
    else if (method === "arce to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 643.51925488)).toExponential(fixedValue);
    else if (method === "arce_us to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 643.52182897)).toExponential(fixedValue);
    else if (method === "rood to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 160.87981372)).toExponential(fixedValue);
    else if (method === "square_chain to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 64.351925488)).toExponential(fixedValue);
    else if (method === "square_rod to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 4.021995343)).toExponential(fixedValue);
    else if (method === "square_rod_us to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 4.0220114311)).toExponential(fixedValue);
    else if (method === "square_perch to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 4.021995343)).toExponential(fixedValue);
    else if (method === "square_pole to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 4.021995343)).toExponential(fixedValue);
    else if (method === "square_mil to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1.025914535E-10)).toExponential(fixedValue);
    else if (method === "circular_mil to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 8.057513915E-11)).toExponential(fixedValue);
    else if (method === "homestead to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 102963.08078)).toExponential(fixedValue);
    else if (method === "sabin to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.0147731693)).toExponential(fixedValue);
    else if (method === "cuerda to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 625)).toExponential(fixedValue);
    else if (method === "arpent to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 642.63286473)).toExponential(fixedValue);
    else if (method === "plaza to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1017.7092541)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 0.1111111111)).toExponential(fixedValue);
    else if (method === "electron_cross_section to varas_conuqueras_cuad") return Number.parseFloat(eval(num * 1.057854958E-29)).toExponential(fixedValue);
};
export const electronCrossSection_calculation = (method, num) => {
    if (method === "square_meter to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+28)).toExponential(fixedValue);
    else if (method === "square_kilometer to electron_cross_section") return Number.parseFloat(num * 1.503202964E+34).toExponential(fixedValue);
    else if (method === "square_hectometer to electron_cross_section") return Number.parseFloat(num * 1.503202964E+32).toExponential(fixedValue);
    else if (method === "square_dekameter to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+30)).toExponential(fixedValue);
    else if (method === "square_decimeter to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+26)).toExponential(fixedValue);
    else if (method === "square_centimeter to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+24)).toExponential(fixedValue);
    else if (method === "square_milimeter to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+22)).toExponential(fixedValue);
    else if (method === "square_micrometer to electron_cross_section") return Number.parseFloat(eval(num * 15032029647492000)).toExponential(fixedValue);
    else if (method === "square_nanometer to electron_cross_section") return Number.parseFloat(eval(num * 15032029647)).toExponential(fixedValue);
    else if (method === "hectare to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+32)).toExponential(fixedValue);
    else if (method === "are to electron_cross_section") return Number.parseFloat(eval(num * 1.503202964E+30)).toExponential(fixedValue);
    else if (method === "barn to electron_cross_section") return Number.parseFloat(eval(num * 1.5032029647)).toExponential(fixedValue);
    else if (method === "square_mile to electron_cross_section") return Number.parseFloat(eval(num * 3.893277806E+34)).toExponential(fixedValue);
    else if (method === "square_mile_us to electron_cross_section") return Number.parseFloat(eval(num * 3.893293379E+34)).toExponential(fixedValue);
    else if (method === "square_yard to electron_cross_section") return Number.parseFloat(eval(num * 1.256869126E+28)).toExponential(fixedValue);
    else if (method === "square_foot to electron_cross_section") return Number.parseFloat(eval(num * 1.396521251E+27)).toExponential(fixedValue);
    else if (method === "square_foot_us to electron_cross_section") return Number.parseFloat(eval(num * 1.396526837E+27)).toExponential(fixedValue);
    else if (method === "square_inch to electron_cross_section") return Number.parseFloat(eval(num * 9.698064247E+24)).toExponential(fixedValue);
    else if (method === "circular_inch to electron_cross_section") return Number.parseFloat(eval(num * 7.616841848E+24)).toExponential(fixedValue);
    else if (method === "township to electron_cross_section") return Number.parseFloat(eval(num * 1.40158001E+36)).toExponential(fixedValue);
    else if (method === "section to electron_cross_section") return Number.parseFloat(eval(num * 3.893277806E+34)).toExponential(fixedValue);
    else if (method === "arce to electron_cross_section") return Number.parseFloat(eval(num * 6.083246572E+31)).toExponential(fixedValue);
    else if (method === "arce_us to electron_cross_section") return Number.parseFloat(eval(num * 6.083270905E+31)).toExponential(fixedValue);
    else if (method === "rood to electron_cross_section") return Number.parseFloat(eval(num * 1.520811643E+31)).toExponential(fixedValue);
    else if (method === "square_chain to electron_cross_section") return Number.parseFloat(eval(num * 6.083246572E+30)).toExponential(fixedValue);
    else if (method === "square_rod to electron_cross_section") return Number.parseFloat(eval(num * 3.802029107E+29)).toExponential(fixedValue);
    else if (method === "square_rod_us to electron_cross_section") return Number.parseFloat(eval(num * 3.802044315E+29)).toExponential(fixedValue);
    else if (method === "square_perch to electron_cross_section") return Number.parseFloat(eval(num * 3.802029107E+29)).toExponential(fixedValue);
    else if (method === "square_pole to electron_cross_section") return Number.parseFloat(eval(num * 3.802029107E+29)).toExponential(fixedValue);
    else if (method === "square_mil to electron_cross_section") return Number.parseFloat(eval(num * 9698064247375940000)).toExponential(fixedValue);
    else if (method === "circular_mil to electron_cross_section") return Number.parseFloat(eval(num * 7616841848399461000)).toExponential(fixedValue);
    else if (method === "homestead to electron_cross_section") return Number.parseFloat(eval(num * 9.733194515E+33)).toExponential(fixedValue);
    else if (method === "sabin to electron_cross_section") return Number.parseFloat(eval(num * 1.396521251E+27)).toExponential(fixedValue);
    else if (method === "cuerda to electron_cross_section") return Number.parseFloat(eval(num * 5.908182356E+31)).toExponential(fixedValue);
    else if (method === "arpent to electron_cross_section") return Number.parseFloat(eval(num * 6.074867444E+31)).toExponential(fixedValue);
    else if (method === "plaza to electron_cross_section") return Number.parseFloat(eval(num * 9.620498974E+31)).toExponential(fixedValue);
    else if (method === "varas_castellanas_cuad to electron_cross_section") return Number.parseFloat(eval(num * 1.050343529E+28)).toExponential(fixedValue);
    else if (method === "varas_conuqueras_cuad to electron_cross_section") return Number.parseFloat(eval(num * 9.453091769E+28)).toExponential(fixedValue);
};
