const fixedValue = 2;

export const faradCalculation = (method, num) => {
    if (method === "exafarad to farad") return Number.parseFloat(eval(num * 1E+18)).toExponential(fixedValue);
    else if (method === "petafarad to farad") return Number.parseFloat(eval(num * 1E+15)).toExponential(fixedValue);
    else if (method === "terafarad to farad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to farad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "megafarad to farad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "kilofarad to farad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "hectofarad to farad") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "dekafarad to farad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "decifarad to farad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "centifarad to farad") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "millifarad to farad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "microfarad to farad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "nanofarad to farad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "picofarad to farad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "femtofarad to farad") return Number.parseFloat(eval(num  * 1.E-15)).toExponential(fixedValue);
    else if (method === "attofarad to farad") return Number.parseFloat(eval(num * 9.999999999E-19)).toExponential(fixedValue);
    else if (method === "coulumb_volt to farad") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "abfarad to farad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to farad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "statfarad to farad") return Number.parseFloat(eval(num * 1.112650056E-12)).toExponential(fixedValue);
    else if (method === "esu_capacitance to farad") return Number.parseFloat(eval(num * 1.112650056E-12)).toExponential(fixedValue);

}
export const exafaradCalculation = (method, num) => {
    if (method === "farad to exafarad") return Number.parseFloat(eval(num * 1E-18)).toExponential(fixedValue);
    else if (method === "petafarad to exafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "terafarad to exafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "gigafarad to exafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "megafarad to exafarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "kilofarad to exafarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "hectofarad to exafarad") return Number.parseFloat(eval(num * 1.E-16)).toExponential(fixedValue);
    else if (method === "dekafarad to exafarad") return Number.parseFloat(eval(num * 1.E-17)).toExponential(fixedValue);
    else if (method === "decifarad to exafarad") return Number.parseFloat(eval(num * 1.E-19)).toExponential(fixedValue);
    else if (method === "centifarad to exafarad") return Number.parseFloat(eval(num * 1.E-20)).toExponential(fixedValue);
    else if (method === "millifarad to exafarad") return Number.parseFloat(eval(num * 1.E-21)).toExponential(fixedValue);
    else if (method === "microfarad to exafarad") return Number.parseFloat(eval(num * 1.E-24)).toExponential(fixedValue);
    else if (method === "nanofarad to exafarad") return Number.parseFloat(eval(num * 1.E-27)).toExponential(fixedValue);
    else if (method === "picofarad to exafarad") return Number.parseFloat(eval(num * 9.999999999E-31)).toExponential(fixedValue);
    else if (method === "femtofarad to exafarad") return Number.parseFloat(eval(num  * 1.E-33)).toExponential(fixedValue);
    else if (method === "attofarad to exafarad") return Number.parseFloat(eval(num * 1.E-36)).toExponential(fixedValue);
    else if (method === "coulumb_volt to exafarad") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "abfarad to exafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "emu_capacitance to exafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "statfarad to exafarad") return Number.parseFloat(eval(num * 1.112650056E-30)).toExponential(fixedValue);
    else if (method === "esu_capacitance to exafarad") return Number.parseFloat(eval(num * 1.112650056E-30)).toExponential(fixedValue);
}
export const petafaradCalculation = (method, num) => {
    if (method === "farad to petafarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "exafarad to petafarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "terafarad to petafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "gigafarad to petafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "megafarad to petafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "kilofarad to petafarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "hectofarad to petafarad") return Number.parseFloat(eval(num * 1.E-13)).toExponential(fixedValue);
    else if (method === "dekafarad to petafarad") return Number.parseFloat(eval(num * 1.E-14)).toExponential(fixedValue);
    else if (method === "decifarad to petafarad") return Number.parseFloat(eval(num * 1.E-16)).toExponential(fixedValue);
    else if (method === "centifarad to petafarad") return Number.parseFloat(eval(num * 1.E-17)).toExponential(fixedValue);
    else if (method === "millifarad to petafarad") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "microfarad to petafarad") return Number.parseFloat(eval(num * 1.E-21)).toExponential(fixedValue);
    else if (method === "nanofarad to petafarad") return Number.parseFloat(eval(num * 1.E-24)).toExponential(fixedValue);
    else if (method === "picofarad to petafarad") return Number.parseFloat(eval(num * 1.E-27)).toExponential(fixedValue);
    else if (method === "femtofarad to petafarad") return Number.parseFloat(eval(num  * 1.E-30)).toExponential(fixedValue);
    else if (method === "attofarad to petafarad") return Number.parseFloat(eval(num * 9.999999999E-34)).toExponential(fixedValue);
    else if (method === "coulumb_volt to petafarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "abfarad to petafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "emu_capacitance to petafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "statfarad to petafarad") return Number.parseFloat(eval(num * 1.112650056E-27)).toExponential(fixedValue);
    else if (method === "esu_capacitance to petafarad") return Number.parseFloat(eval(num * 1.112650056E-27)).toExponential(fixedValue);
};
export const terafaradCalculation = (method, num) => {
    if (method === "farad to terafarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "exafarad to terafarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "petafarad to terafarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "gigafarad to terafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "megafarad to terafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "kilofarad to terafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "hectofarad to terafarad") return Number.parseFloat(eval(num * 1.E-10)).toExponential(fixedValue);
    else if (method === "dekafarad to terafarad") return Number.parseFloat(eval(num * 1.E-11)).toExponential(fixedValue);
    else if (method === "decifarad to terafarad") return Number.parseFloat(eval(num * 1.E-13)).toExponential(fixedValue);
    else if (method === "centifarad to terafarad") return Number.parseFloat(eval(num * 1.E-14)).toExponential(fixedValue);
    else if (method === "millifarad to terafarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "microfarad to terafarad") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "nanofarad to terafarad") return Number.parseFloat(eval(num * 1.E-21)).toExponential(fixedValue);
    else if (method === "picofarad to terafarad") return Number.parseFloat(eval(num * 1.E-24)).toExponential(fixedValue);
    else if (method === "femtofarad to terafarad") return Number.parseFloat(eval(num  * 1.E-27)).toExponential(fixedValue);
    else if (method === "attofarad to terafarad") return Number.parseFloat(eval(num * 9.999999999E-31)).toExponential(fixedValue);
    else if (method === "coulumb_volt to terafarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "abfarad to terafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "emu_capacitance to terafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "statfarad to terafarad") return Number.parseFloat(eval(num * 1.112650056E-24)).toExponential(fixedValue);
    else if (method === "esu_capacitance to terafarad") return Number.parseFloat(eval(num * 1.112650056E-24)).toExponential(fixedValue);
};
export const gigafaradCalculation = (method, num) => {
    if (method === "farad to gigafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "exafarad to gigafarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "petafarad to gigafarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "terafarad to gigafarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "megafarad to gigafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "kilofarad to gigafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "hectofarad to gigafarad") return Number.parseFloat(eval(num * 1.E-7)).toExponential(fixedValue);
    else if (method === "dekafarad to gigafarad") return Number.parseFloat(eval(num * 1.E-8)).toExponential(fixedValue);
    else if (method === "decifarad to gigafarad") return Number.parseFloat(eval(num * 1.E-10)).toExponential(fixedValue);
    else if (method === "centifarad to gigafarad") return Number.parseFloat(eval(num * 1.E-11)).toExponential(fixedValue);
    else if (method === "millifarad to gigafarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "microfarad to gigafarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "nanofarad to gigafarad") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "picofarad to gigafarad") return Number.parseFloat(eval(num * 1.E-21)).toExponential(fixedValue);
    else if (method === "femtofarad to gigafarad") return Number.parseFloat(eval(num  * 1.E-24)).toExponential(fixedValue);
    else if (method === "attofarad to gigafarad") return Number.parseFloat(eval(num * 1.E-27)).toExponential(fixedValue);
    else if (method === "coulumb_volt to gigafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "abfarad to gigafarad") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "emu_capacitance to gigafarad") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "statfarad to gigafarad") return Number.parseFloat(eval(num * 1.112650056E-21)).toExponential(fixedValue);
    else if (method === "esu_capacitance to gigafarad") return Number.parseFloat(eval(num * 1.112650056E-21)).toExponential(fixedValue);
};
export const megafaradCalculation = (method, num) => {
    if (method === "farad to megafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "exafarad to megafarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to megafarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "terafarad to megafarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "gigafarad to megafarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "kilofarad to megafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "hectofarad to megafarad") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "dekafarad to megafarad") return Number.parseFloat(eval(num * 0.00001)).toExponential(fixedValue);
    else if (method === "decifarad to megafarad") return Number.parseFloat(eval(num * 1.E-7)).toExponential(fixedValue);
    else if (method === "centifarad to megafarad") return Number.parseFloat(eval(num * 1.E-8)).toExponential(fixedValue);
    else if (method === "millifarad to megafarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "microfarad to megafarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "nanofarad to megafarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "picofarad to megafarad") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "femtofarad to megafarad") return Number.parseFloat(eval(num  * 1.E-21)).toExponential(fixedValue);
    else if (method === "attofarad to megafarad") return Number.parseFloat(eval(num * 1.E-24)).toExponential(fixedValue);
    else if (method === "coulumb_volt to megafarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "abfarad to megafarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to megafarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "statfarad to megafarad") return Number.parseFloat(eval(num * 1.112650056E-18)).toExponential(fixedValue);
    else if (method === "esu_capacitance to megafarad") return Number.parseFloat(eval(num * 1.112650056E-18)).toExponential(fixedValue);
};
export const kilofaradCalculation = (method, num) => {
    if (method === "farad to kilofarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "exafarad to kilofarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to kilofarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to kilofarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to kilofarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "megafarad to kilofarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "hectofarad to kilofarad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "dekafarad to kilofarad") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "decifarad to kilofarad") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "centifarad to kilofarad") return Number.parseFloat(eval(num * 0.00001)).toExponential(fixedValue);
    else if (method === "millifarad to kilofarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "microfarad to kilofarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "nanofarad to kilofarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "picofarad to kilofarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "femtofarad to kilofarad") return Number.parseFloat(eval(num  * 1.E-18)).toExponential(fixedValue);
    else if (method === "attofarad to kilofarad") return Number.parseFloat(eval(num * 1.E-21)).toExponential(fixedValue);
    else if (method === "coulumb_volt to kilofarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "abfarad to kilofarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to kilofarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "statfarad to kilofarad") return Number.parseFloat(eval(num * 1.112650056E-15)).toExponential(fixedValue);
    else if (method === "esu_capacitance to kilofarad") return Number.parseFloat(eval(num * 1.112650056E-15)).toExponential(fixedValue);
};
export const hectofaradCalculation = (method, num) => {
    if (method === "farad to hectofarad") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "exafarad to hectofarad") return Number.parseFloat(eval(num * 10000000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to hectofarad") return Number.parseFloat(eval(num * 10000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to hectofarad") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to hectofarad") return Number.parseFloat(eval(num * 10000000)).toExponential(fixedValue);
    else if (method === "megafarad to hectofarad") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "kilofarad to hectofarad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "dekafarad to hectofarad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "decifarad to hectofarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "centifarad to hectofarad") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "millifarad to hectofarad") return Number.parseFloat(eval(num * 0.00001)).toExponential(fixedValue);
    else if (method === "microfarad to hectofarad") return Number.parseFloat(eval(num * 1.E-8)).toExponential(fixedValue);
    else if (method === "nanofarad to hectofarad") return Number.parseFloat(eval(num * 1.E-11)).toExponential(fixedValue);
    else if (method === "picofarad to hectofarad") return Number.parseFloat(eval(num * 1.E-14)).toExponential(fixedValue);
    else if (method === "femtofarad to hectofarad") return Number.parseFloat(eval(num  * 1.E-17)).toExponential(fixedValue);
    else if (method === "attofarad to hectofarad") return Number.parseFloat(eval(num * 1.E-20)).toExponential(fixedValue);
    else if (method === "coulumb_volt to hectofarad") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "abfarad to hectofarad") return Number.parseFloat(eval(num * 10000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to hectofarad") return Number.parseFloat(eval(num * 10000000)).toExponential(fixedValue);
    else if (method === "statfarad to hectofarad") return Number.parseFloat(eval(num * 1.112650056E-14)).toExponential(fixedValue);
    else if (method === "esu_capacitance to hectofarad") return Number.parseFloat(eval(num * 1.112650056E-14)).toExponential(fixedValue);
};
export const dekafaradCalculation = (method, num) => {
    if (method === "farad to dekafarad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "exafarad to dekafarad") return Number.parseFloat(eval(num * 100000000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to dekafarad") return Number.parseFloat(eval(num * 100000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to dekafarad") return Number.parseFloat(eval(num * 100000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to dekafarad") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "megafarad to dekafarad") return Number.parseFloat(eval(num * 100000)).toExponential(fixedValue);
    else if (method === "kilofarad to dekafarad") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "hectofarad to dekafarad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "decifarad to dekafarad") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "centifarad to dekafarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "millifarad to dekafarad") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "microfarad to dekafarad") return Number.parseFloat(eval(num * 1.E-7)).toExponential(fixedValue);
    else if (method === "nanofarad to dekafarad") return Number.parseFloat(eval(num * 1.E-10)).toExponential(fixedValue);
    else if (method === "picofarad to dekafarad") return Number.parseFloat(eval(num * 1.E-13)).toExponential(fixedValue);
    else if (method === "femtofarad to dekafarad") return Number.parseFloat(eval(num  * 1.E-16)).toExponential(fixedValue);
    else if (method === "attofarad to dekafarad") return Number.parseFloat(eval(num * 1.E-19)).toExponential(fixedValue);
    else if (method === "coulumb_volt to dekafarad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "abfarad to dekafarad") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to dekafarad") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "statfarad to dekafarad") return Number.parseFloat(eval(num * 1.112650056E-13)).toExponential(fixedValue);
    else if (method === "esu_capacitance to dekafarad") return Number.parseFloat(eval(num * 1.112650056E-13)).toExponential(fixedValue);
};
export const decifaradCalculation = (method, num) => {
    if (method === "farad to decifarad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "exafarad to decifarad") return Number.parseFloat(eval(num * 10000000000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to decifarad") return Number.parseFloat(eval(num * 10000000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to decifarad") return Number.parseFloat(eval(num * 10000000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to decifarad") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "megafarad to decifarad") return Number.parseFloat(eval(num * 10000000)).toExponential(fixedValue);
    else if (method === "kilofarad to decifarad") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "hectofarad to decifarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "dekafarad to decifarad") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "centifarad to decifarad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "millifarad to decifarad") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "microfarad to decifarad") return Number.parseFloat(eval(num * 0.00001)).toExponential(fixedValue);
    else if (method === "nanofarad to decifarad") return Number.parseFloat(eval(num * 1.E-8)).toExponential(fixedValue);
    else if (method === "picofarad to decifarad") return Number.parseFloat(eval(num * 1.E-11)).toExponential(fixedValue);
    else if (method === "femtofarad to decifarad") return Number.parseFloat(eval(num  * 1.E-14)).toExponential(fixedValue);
    else if (method === "attofarad to decifarad") return Number.parseFloat(eval(num * 9.999999999E-18)).toExponential(fixedValue);
    else if (method === "coulumb_volt to decifarad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "abfarad to decifarad") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to decifarad") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "statfarad to decifarad") return Number.parseFloat(eval(num * 1.112650056E-11)).toExponential(fixedValue);
    else if (method === "esu_capacitance to decifarad") return Number.parseFloat(eval(num * 1.112650056E-11)).toExponential(fixedValue);
};
export const centifaradCalculation = (method, num) => {
    if (method === "farad to centifarad") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "exafarad to centifarad") return Number.parseFloat(eval(num * 100000000000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to centifarad") return Number.parseFloat(eval(num * 100000000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to centifarad") return Number.parseFloat(eval(num * 100000000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to centifarad") return Number.parseFloat(eval(num * 100000000000)).toExponential(fixedValue);
    else if (method === "megafarad to centifarad") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "kilofarad to centifarad") return Number.parseFloat(eval(num * 100000)).toExponential(fixedValue);
    else if (method === "hectofarad to centifarad") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "dekafarad to centifarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "decifarad to centifarad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "millifarad to centifarad") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "microfarad to centifarad") return Number.parseFloat(eval(num * 0.0001)).toExponential(fixedValue);
    else if (method === "nanofarad to centifarad") return Number.parseFloat(eval(num * 1.E-7)).toExponential(fixedValue);
    else if (method === "picofarad to centifarad") return Number.parseFloat(eval(num * 1.E-10)).toExponential(fixedValue);
    else if (method === "femtofarad to centifarad") return Number.parseFloat(eval(num  * 1.E-13)).toExponential(fixedValue);
    else if (method === "attofarad to centifarad") return Number.parseFloat(eval(num * 1.E-16)).toExponential(fixedValue);
    else if (method === "coulumb_volt to centifarad") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "abfarad to centifarad") return Number.parseFloat(eval(num * 100000000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to centifarad") return Number.parseFloat(eval(num * 100000000000)).toExponential(fixedValue);
    else if (method === "statfarad to centifarad") return Number.parseFloat(eval(num * 1.112650056E-10)).toExponential(fixedValue);
    else if (method === "esu_capacitance to centifarad") return Number.parseFloat(eval(num * 1.112650056E-10)).toExponential(fixedValue);
};
export const millifaradCalculation = (method, num) => {
    if (method === "farad to millifarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "exafarad to millifarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "petafarad to millifarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to millifarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to millifarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "megafarad to millifarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "kilofarad to millifarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "hectofarad to millifarad") return Number.parseFloat(eval(num * 100000)).toExponential(fixedValue);
    else if (method === "dekafarad to millifarad") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "decifarad to millifarad") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "centifarad to millifarad") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "microfarad to millifarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "nanofarad to millifarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "picofarad to millifarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "femtofarad to millifarad") return Number.parseFloat(eval(num  * 1.E-12)).toExponential(fixedValue);
    else if (method === "attofarad to millifarad") return Number.parseFloat(eval(num * 9.999999999E-16)).toExponential(fixedValue);
    else if (method === "coulumb_volt to millifarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "abfarad to millifarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to millifarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "statfarad to millifarad") return Number.parseFloat(eval(num * 1.112650056E-9)).toExponential(fixedValue);
    else if (method === "esu_capacitance to millifarad") return Number.parseFloat(eval(num * 1.112650056E-9)).toExponential(fixedValue);
};
export const microfaradCalculation = (method, num) => {
    if (method === "farad to microfarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "exafarad to microfarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "petafarad to microfarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "terafarad to microfarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to microfarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "megafarad to microfarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "kilofarad to microfarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "hectofarad to microfarad") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "dekafarad to microfarad") return Number.parseFloat(eval(num * 10000000)).toExponential(fixedValue);
    else if (method === "decifarad to microfarad") return Number.parseFloat(eval(num * 100000)).toExponential(fixedValue);
    else if (method === "centifarad to microfarad") return Number.parseFloat(eval(num * 10000)).toExponential(fixedValue);
    else if (method === "millifarad to microfarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "nanofarad to microfarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "picofarad to microfarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "femtofarad to microfarad") return Number.parseFloat(eval(num  * 1.E-9)).toExponential(fixedValue);
    else if (method === "attofarad to microfarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "coulumb_volt to microfarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "abfarad to microfarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to microfarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "statfarad to microfarad") return Number.parseFloat(eval(num * 0.0000011127)).toExponential(fixedValue);
    else if (method === "esu_capacitance to microfarad") return Number.parseFloat(eval(num * 0.0000011127)).toExponential(fixedValue);
};
export const nanofaradCalculation = (method, num) => {
    if (method === "farad to nanofarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "exafarad to nanofarad") return Number.parseFloat(eval(num * 1.E+27)).toExponential(fixedValue);
    else if (method === "petafarad to nanofarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "terafarad to nanofarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "gigafarad to nanofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "megafarad to nanofarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "kilofarad to nanofarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "hectofarad to nanofarad") return Number.parseFloat(eval(num * 100000000000)).toExponential(fixedValue);
    else if (method === "dekafarad to nanofarad") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "decifarad to nanofarad") return Number.parseFloat(eval(num * 100000000)).toExponential(fixedValue);
    else if (method === "centifarad to nanofarad") return Number.parseFloat(eval(num * 10000000)).toExponential(fixedValue);
    else if (method === "millifarad to nanofarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "microfarad to nanofarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "picofarad to nanofarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "femtofarad to nanofarad") return Number.parseFloat(eval(num  * 0.000001)).toExponential(fixedValue);
    else if (method === "attofarad to nanofarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "coulumb_volt to nanofarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "abfarad to nanofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "emu_capacitance to nanofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "statfarad to nanofarad") return Number.parseFloat(eval(num * 0.0011126501)).toExponential(fixedValue);
    else if (method === "esu_capacitance to nanofarad") return Number.parseFloat(eval(num * 0.0011126501)).toExponential(fixedValue);
};
export const picofaradCalculation = (method, num) => {
    if (method === "farad to picofarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "exafarad to picofarad") return Number.parseFloat(eval(num * 1.E+30)).toExponential(fixedValue);
    else if (method === "petafarad to picofarad") return Number.parseFloat(eval(num * 1.E+27)).toExponential(fixedValue);
    else if (method === "terafarad to picofarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "gigafarad to picofarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "megafarad to picofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "kilofarad to picofarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "hectofarad to picofarad") return Number.parseFloat(eval(num * 100000000000000)).toExponential(fixedValue);
    else if (method === "dekafarad to picofarad") return Number.parseFloat(eval(num * 10000000000000)).toExponential(fixedValue);
    else if (method === "decifarad to picofarad") return Number.parseFloat(eval(num * 100000000000)).toExponential(fixedValue);
    else if (method === "centifarad to picofarad") return Number.parseFloat(eval(num * 10000000000)).toExponential(fixedValue);
    else if (method === "millifarad to picofarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "microfarad to picofarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "nanofarad to picofarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "femtofarad to picofarad") return Number.parseFloat(eval(num  * 0.001)).toExponential(fixedValue);
    else if (method === "attofarad to picofarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "coulumb_volt to picofarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "abfarad to picofarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "emu_capacitance to picofarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "statfarad to picofarad") return Number.parseFloat(eval(num * 1.1126500561)).toExponential(fixedValue);
    else if (method === "esu_capacitance to picofarad") return Number.parseFloat(eval(num * 1.1126500561)).toExponential(fixedValue);
};
export const femtofaradCalculation = (method, num) => {
    if (method === "farad to femtofarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "exafarad to femtofarad") return Number.parseFloat(eval(num * 1.E+33)).toExponential(fixedValue);
    else if (method === "petafarad to femtofarad") return Number.parseFloat(eval(num * 9.999999999E+29)).toExponential(fixedValue);
    else if (method === "terafarad to femtofarad") return Number.parseFloat(eval(num * 1.E+27)).toExponential(fixedValue);
    else if (method === "gigafarad to femtofarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "megafarad to femtofarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "kilofarad to femtofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "hectofarad to femtofarad") return Number.parseFloat(eval(num * 100000000000000000)).toExponential(fixedValue);
    else if (method === "dekafarad to femtofarad") return Number.parseFloat(eval(num * 10000000000000000)).toExponential(fixedValue);
    else if (method === "decifarad to femtofarad") return Number.parseFloat(eval(num * 100000000000000)).toExponential(fixedValue);
    else if (method === "centifarad to femtofarad") return Number.parseFloat(eval(num * 10000000000000)).toExponential(fixedValue);
    else if (method === "millifarad to femtofarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "microfarad to femtofarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "nanofarad to femtofarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "picofarad to femtofarad") return Number.parseFloat(eval(num  * 1000)).toExponential(fixedValue);
    else if (method === "attofarad to femtofarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "coulumb_volt to femtofarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "abfarad to femtofarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "emu_capacitance to femtofarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "statfarad to femtofarad") return Number.parseFloat(eval(num * 1112.6500561)).toExponential(fixedValue);
    else if (method === "esu_capacitance to femtofarad") return Number.parseFloat(eval(num * 1112.6500561)).toExponential(fixedValue);
};
export const attofaradCalculation = (method, num) => {
    if (method === "farad to attofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "exafarad to attofarad") return Number.parseFloat(eval(num * 1.E+36)).toExponential(fixedValue);
    else if (method === "petafarad to attofarad") return Number.parseFloat(eval(num * 1.E+33)).toExponential(fixedValue);
    else if (method === "terafarad to attofarad") return Number.parseFloat(eval(num * 1.E+30)).toExponential(fixedValue);
    else if (method === "gigafarad to attofarad") return Number.parseFloat(eval(num * 1.E+27)).toExponential(fixedValue);
    else if (method === "megafarad to attofarad") return Number.parseFloat(eval(num * 1.E+24)).toExponential(fixedValue);
    else if (method === "kilofarad to attofarad") return Number.parseFloat(eval(num * 1.E+21)).toExponential(fixedValue);
    else if (method === "hectofarad to attofarad") return Number.parseFloat(eval(num * 100000000000000000000)).toExponential(fixedValue);
    else if (method === "dekafarad to attofarad") return Number.parseFloat(eval(num * 10000000000000000000)).toExponential(fixedValue);
    else if (method === "decifarad to attofarad") return Number.parseFloat(eval(num * 100000000000000000)).toExponential(fixedValue);
    else if (method === "centifarad to attofarad") return Number.parseFloat(eval(num * 10000000000000000)).toExponential(fixedValue);
    else if (method === "millifarad to attofarad") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "microfarad to attofarad") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "nanofarad to attofarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "picofarad to attofarad") return Number.parseFloat(eval(num  * 1000000)).toExponential(fixedValue);
    else if (method === "femtofarad to attofarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "coulumb_volt to attofarad") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "abfarad to attofarad") return Number.parseFloat(eval(num * 1.E+27)).toExponential(fixedValue);
    else if (method === "emu_capacitance to attofarad") return Number.parseFloat(eval(num * 1.E+27)).toExponential(fixedValue);
    else if (method === "statfarad to attofarad") return Number.parseFloat(eval(num * 1112650.0561)).toExponential(fixedValue);
    else if (method === "esu_capacitance to attofarad") return Number.parseFloat(eval(num * 1112650.0561)).toExponential(fixedValue);
};
export const abfaradCalculation = (method, num) => {
    if (method === "farad to abfarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "exafarad to abfarad") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "petafarad to abfarad") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "terafarad to abfarad") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "gigafarad to abfarad") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "megafarad to abfarad") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "kilofarad to abfarad") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "hectofarad to abfarad") return Number.parseFloat(eval(num * 1.E-7)).toExponential(fixedValue);
    else if (method === "dekafarad to abfarad") return Number.parseFloat(eval(num * 1.E-8)).toExponential(fixedValue);
    else if (method === "decifarad to abfarad") return Number.parseFloat(eval(num * 1.E-10)).toExponential(fixedValue);
    else if (method === "centifarad to abfarad") return Number.parseFloat(eval(num * 1.E-11)).toExponential(fixedValue);
    else if (method === "millifarad to abfarad") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "microfarad to abfarad") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "nanofarad to abfarad") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "picofarad to abfarad") return Number.parseFloat(eval(num  * 1.E-21)).toExponential(fixedValue);
    else if (method === "femtofarad to abfarad") return Number.parseFloat(eval(num * 1.E-24)).toExponential(fixedValue);
    else if (method === "coulumb_volt to abfarad") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "attofarad to abfarad") return Number.parseFloat(eval(num * 1.E-27)).toExponential(fixedValue);
    else if (method === "emu_capacitance to abfarad") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "statfarad to abfarad") return Number.parseFloat(eval(num * 1.112650056E-21)).toExponential(fixedValue);
    else if (method === "esu_capacitance to abfarad") return Number.parseFloat(eval(num * 1.112650056E-21)).toExponential(fixedValue);
};
export const statfaradCalculation = (method, num) => {
    console.log("method", method)
    if (method === "farad to statfarad") return Number.parseFloat(eval(num * 898755178737)).toExponential(fixedValue);
    else if (method === "exafarad to statfarad") return Number.parseFloat(eval(num * 8.987551787E+29)).toExponential(fixedValue);
    else if (method === "petafarad to statfarad") return Number.parseFloat(eval(num * 8.987551787E+26)).toExponential(fixedValue);
    else if (method === "terafarad to statfarad") return Number.parseFloat(eval(num * 8.987551787E+23)).toExponential(fixedValue);
    else if (method === "gigafarad to statfarad") return Number.parseFloat(eval(num * 898755178736500000000)).toExponential(fixedValue);
    else if (method === "megafarad to statfarad") return Number.parseFloat(eval(num * 898755178736500000)).toExponential(fixedValue);
    else if (method === "kilofarad to statfarad") return Number.parseFloat(eval(num * 898755178736500)).toExponential(fixedValue);
    else if (method === "hectofarad to statfarad") return Number.parseFloat(eval(num * 89875517873650)).toExponential(fixedValue);
    else if (method === "dekafarad to statfarad") return Number.parseFloat(eval(num * 8987551787365)).toExponential(fixedValue);
    else if (method === "decifarad to statfarad") return Number.parseFloat(eval(num * 89875517874)).toExponential(fixedValue);
    else if (method === "centifarad to statfarad") return Number.parseFloat(eval(num * 8987551787.4)).toExponential(fixedValue);
    else if (method === "millifarad to statfarad") return Number.parseFloat(eval(num * 898755178.74)).toExponential(fixedValue);
    else if (method === "microfarad to statfarad") return Number.parseFloat(eval(num * 898755.17874)).toExponential(fixedValue);
    else if (method === "nanofarad to statfarad") return Number.parseFloat(eval(num * 898.75517874)).toExponential(fixedValue);
    else if (method === "picofarad to statfarad") return Number.parseFloat(eval(num  * 0.8987551787)).toExponential(fixedValue);
    else if (method === "femtofarad to statfarad") return Number.parseFloat(eval(num * 0.0008987552)).toExponential(fixedValue);
    else if (method === "coulumb_volt to statfarad") return Number.parseFloat(eval(num * 898755178737)).toExponential(fixedValue);
    else if (method === "attofarad to statfarad") return Number.parseFloat(eval(num * 8.987551787E-7)).toExponential(fixedValue);
    else if (method === "emu_capacitance to statfarad") return Number.parseFloat(eval(num * 898755178737)).toExponential(fixedValue);
    else if (method === "abfarad to statfarad") return Number.parseFloat(eval(num * 898755178736500000000)).toExponential(fixedValue);
    else if (method === "esu_capacitance to statfarad") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
};
export const coulumb_voltCalculation = (method, num) => {
    if (method === "farad to coulumb_volt") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "exafarad to coulumb_volt") return Number.parseFloat(eval(num * 1000000000000000000)).toExponential(fixedValue);
    else if (method === "petafarad to coulumb_volt") return Number.parseFloat(eval(num * 1000000000000000)).toExponential(fixedValue);
    else if (method === "terafarad to coulumb_volt") return Number.parseFloat(eval(num * 1000000000000)).toExponential(fixedValue);
    else if (method === "gigafarad to coulumb_volt") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "megafarad to coulumb_volt") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "kilofarad to coulumb_volt") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "hectofarad to coulumb_volt") return Number.parseFloat(eval(num * 100)).toExponential(fixedValue);
    else if (method === "dekafarad to coulumb_volt") return Number.parseFloat(eval(num * 10)).toExponential(fixedValue);
    else if (method === "decifarad to coulumb_volt") return Number.parseFloat(eval(num * 0.1)).toExponential(fixedValue);
    else if (method === "centifarad to coulumb_volt") return Number.parseFloat(eval(num * 0.01)).toExponential(fixedValue);
    else if (method === "millifarad to coulumb_volt") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "microfarad to coulumb_volt") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "nanofarad to coulumb_volt") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "picofarad to coulumb_volt") return Number.parseFloat(eval(num  * 1.E-12)).toExponential(fixedValue);
    else if (method === "femtofarad to coulumb_volt") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "abfarad to coulumb_volt") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "attofarad to coulumb_volt") return Number.parseFloat(eval(num * 9.999999999E-19)).toExponential(fixedValue);
    else if (method === "emu_capacitance to coulumb_volt") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "statfarad to coulumb_volt") return Number.parseFloat(eval(num * 1.112650056E-12)).toExponential(fixedValue);
    else if (method === "esu_capacitance to coulumb_volt") return Number.parseFloat(eval(num * 1.112650056E-12)).toExponential(fixedValue);
};
export const emu_capacitanceCalculation = (method, num) => {
    if (method === "farad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "exafarad to emu_capacitance") return Number.parseFloat(eval(num * 1000000000)).toExponential(fixedValue);
    else if (method === "petafarad to emu_capacitance") return Number.parseFloat(eval(num * 1000000)).toExponential(fixedValue);
    else if (method === "terafarad to emu_capacitance") return Number.parseFloat(eval(num * 1000)).toExponential(fixedValue);
    else if (method === "gigafarad to emu_capacitance") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "megafarad to emu_capacitance") return Number.parseFloat(eval(num * 0.001)).toExponential(fixedValue);
    else if (method === "kilofarad to emu_capacitance") return Number.parseFloat(eval(num * 0.000001)).toExponential(fixedValue);
    else if (method === "hectofarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-7)).toExponential(fixedValue);
    else if (method === "dekafarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-8)).toExponential(fixedValue);
    else if (method === "decifarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-10)).toExponential(fixedValue);
    else if (method === "centifarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-11)).toExponential(fixedValue);
    else if (method === "millifarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-12)).toExponential(fixedValue);
    else if (method === "microfarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-15)).toExponential(fixedValue);
    else if (method === "nanofarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-18)).toExponential(fixedValue);
    else if (method === "picofarad to emu_capacitance") return Number.parseFloat(eval(num  * 1.E-21)).toExponential(fixedValue);
    else if (method === "femtofarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-24)).toExponential(fixedValue);
    else if (method === "abfarad to emu_capacitance") return Number.parseFloat(eval(num * 1.E-27)).toExponential(fixedValue);
    else if (method === "coulumb_volt to emu_capacitance") return Number.parseFloat(eval(num * 1.E-9)).toExponential(fixedValue);
    else if (method === "attofarad to emu_capacitance") return Number.parseFloat(eval(num * 1)).toExponential(fixedValue);
    else if (method === "statfarad to emu_capacitance") return Number.parseFloat(eval(num * 1.112650056E-21)).toExponential(fixedValue);
    else if (method === "esu_capacitance to emu_capacitance") return Number.parseFloat(eval(num * 1.112650056E-21)).toExponential(fixedValue);
};